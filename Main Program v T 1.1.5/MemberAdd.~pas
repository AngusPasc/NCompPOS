unit MemberAdd;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Mask, DBCtrls, Buttons, ComCtrls, JvExComCtrls, DateUtils,
  JvDateTimePicker, IniFiles, RpDefine, RpBase, RpSystem, Menus,
  JvExControls, JvComponent, JvDBLookup, db, ShellAPI, JvSpeedButton;

type
  TMainMemberAdd = class(TForm)
    function IntDatetoString(i: integer): string;
    function DatetoIntDate(d: TDateTime): integer;
    function WinExecAndWait32(AFileName, AParameters: string;
      Visibility: integer): DWord;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainMemberAdd: TMainMemberAdd;
  s: String;

implementation
        uses DataFrm2, NotesFrm;
{$R *.DFM}

function TMainMemberAdd.IntDatetoString(i: integer): string;
var
  yy, mm, dd: String;
begin
  if i = 0 then
    IntDatetostring := ''
  else
  begin
    yy := copy(inttostr(i),1,4);
    mm := copy(inttostr(i),5,2);
    dd := copy(inttostr(i),7,2);
    If ShortDateFormat = 'dd/MM/yyyy' then
    begin
      IntDatetostring := dd + '/' + mm + '/' + yy;
    end
    else
    begin
      IntDatetostring := yy + '/' + mm + '/' + dd;
    end;
  end;
end;

function TMainMemberAdd.DatetoIntDate(d: TDateTime): integer;
var
  yy, mm, dd, s: String;
begin
  If ShortDateFormat = 'dd/MM/yyyy' then
  begin
    dd := copy(datetostr(d),1,2);
    mm := copy(datetostr(d),4,2);
    yy := copy(datetostr(d),7,4);
  end
  else
  begin
    yy := copy(datetostr(d),1,4);
    mm := copy(datetostr(d),6,2);
    dd := copy(datetostr(d),9,2);
  end;
  s := yy + mm + dd;
  DatetoIntDate := strtoint(s);
end;

function TMainMemberAdd.WinExecAndWait32(AFileName, AParameters: string; Visibility: integer): DWord ;
 { returns -1 if the Exec failed, otherwise returns the process' exit
   code when the process terminates }
var
  zCommandLine: array[0..512] of char;
  {
  zCurDir: array[0..255] of char;
  WorkDir: string;
  }
  StartupInfo: TStartupInfo;
  ProcessInfo: TProcessInformation;
begin
  StrPCopy(zCommandLine, AFileName + ' ' + AParameters);
  // GetDir(0, WorkDir);
  // StrPCopy(zCurDir, WorkDir);
  FillChar(StartupInfo, Sizeof(StartupInfo), #0);
  StartupInfo.cb := Sizeof(StartupInfo);
  StartupInfo.dwFlags := STARTF_USESHOWWINDOW;
  StartupInfo.wShowWindow := Visibility;
  if not CreateProcess(nil,
    zCommandLine, { pointer to command line string }
    nil, { pointer to process security attributes }
    nil, { pointer to thread security attributes }
    False, { handle inheritance flag }
    CREATE_NEW_CONSOLE or { creation flags }
    NORMAL_PRIORITY_CLASS,
    nil, { pointer to new environment block }
    nil, { pointer to current directory name }
    StartupInfo, { pointer to STARTUPINFO }
    ProcessInfo) then { pointer to PROCESS_INF }
    Result := DWord(-1)
  else
  begin
    WaitforSingleObject(ProcessInfo.hProcess, INFINITE);
    GetExitCodeProcess(ProcessInfo.hProcess, Result);
    CloseHandle(ProcessInfo.hProcess);
    CloseHandle(ProcessInfo.hThread);
  end;
end;

end.
