unit CashUpFrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, JvExControls, JvComponent, JvDBLookup, DBCtrls, Mask,
  Buttons, db, Grids, DBGrids, ExtractFrm, JvExButtons, JvBitBtn, ComCtrls,
  JvExComCtrls, JvDateTimePicker, JvExStdCtrls, JvCheckBox, DateUtils,
  UtilsUnit, Math, TCUtilsFrm;

type
  TCashUpForm = class(TForm)
    GroupBox1: TGroupBox;
    JvDBLookupCombo1: TJvDBLookupCombo;
    Label1: TLabel;
    Button1: TButton;
    GroupBox2: TGroupBox;
    Label2: TLabel;
    DBText1: TDBText;
    Label3: TLabel;
    DBText2: TDBText;
    Label4: TLabel;
    DBText3: TDBText;
    GroupBox3: TGroupBox;
    Label5: TLabel;
    DBEdit1: TDBEdit;
    Label6: TLabel;
    DBEdit2: TDBEdit;
    Label7: TLabel;
    DBEdit3: TDBEdit;
    Button2: TButton;
    BitBtn1: TBitBtn;
    DBText4: TDBText;
    DBText5: TDBText;
    DBText6: TDBText;
    DBText7: TDBText;
    Label8: TLabel;
    Label9: TLabel;
    DBText8: TDBText;
    DBEdit4: TDBEdit;
    DBText9: TDBText;
    GroupBox4: TGroupBox;
    Button3: TButton;
    Button4: TButton;
    EndOfShiftDate: TJvDateTimePicker;
    Label10: TLabel;
    RangeCheck: TJvCheckBox;
    RangeBegin: TJvDateTimePicker;
    RangeEnd: TJvDateTimePicker;
    Label11: TLabel;
    Label12: TLabel;
    EnableEndofShiftDate: TJvCheckBox;
    JvBitBtn1: TJvBitBtn;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure RangeCheckClick(Sender: TObject);
    procedure EnableEndofShiftDateClick(Sender: TObject);
    procedure JvBitBtn1Click(Sender: TObject);
  private
    procedure CreateCashUp;
    procedure EndofShiftexec;
    procedure PaymentsEndOfShift;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  CashUpForm: TCashUpForm;
  LastDocNo, TransActFromWhere :string;
  LastDocID : Integer;
  SNextPOSInv : String ='';
  Batchtotal: extended;

implementation
    uses DataFrm2, InvoiceFrm, Listsmnu, PurchaseFrm, TCDataMod;
{$R *.dfm}

procedure TCashUpForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
        DataForm2.CashUpTable.Close;
        DataForm2.Query1.Close;
        CashUpForm.FreeOnRelease;
end;

procedure TCashUpForm.FormShow(Sender: TObject);
begin
        Label8.Caption := DataForm2.IniFile.ReadString ('Settings', 'OtherDescr', 'Other');
        Label9.Caption := DataForm2.IniFile.ReadString ('Settings', 'OtherDescr', 'Other');
        EndOfShiftDate.Date := date;
        EndOfShiftDate.Enabled := False;
        EnableEndofShiftDate.Checked := False;
        Dataform2.CashUpTable.Open;
        RangeBegin.Date := StartofTheMonth(date);
        RangeEnd.Date := EndofTheMonth(date);
        if (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
        begin
          Dataform2.Query1.Close;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('SELECT UserName FROM user_db');
          end;
          Dataform2.Query1.Open;
          GroupBox2.Visible := True;
          GroupBox3.Visible := True;
          DBText5.Visible := True;
          DBText6.Visible := True;
          DBText7.Visible := True;
          DBText8.Visible := True;
        end
        else
        begin
          Dataform2.Query1.Close;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('SELECT UserName FROM user_db');
            Add('Where UserName = "' + DataForm2.User_db.FieldByName('UserName').asString + '"');
          end;
          Dataform2.Query1.Open;
          GroupBox2.Visible := False;
          GroupBox3.Visible := False;
          DBText5.Visible := False;
          DBText6.Visible := False;
          DBText7.Visible := False;
          DBText9.Visible := False;
          Button4.Enabled := False;
          EndOfShiftDate.Enabled := False;
        end;
        If not Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
        begin
          Button3.Enabled := False;
          Button4.Enabled := False;
        end;
end;

procedure TCashUpForm.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
      if (DataForm2.CashUpTablestrState = 'Edit') or (DataForm2.CashUpTablestrState = 'Insert') then
      begin
        if MessageDlg('Do you want to exit without saving?',
        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
          DataForm2.CashUpTable.Cancel;
        end
        else
          CanClose := False;
      end;
end;

procedure TCashUpForm.Button1Click(Sender: TObject);
begin
      if MessageDlg('Are you sure you want to do cash up for user ' + DataForm2.Query1.Fieldbyname('UserName').asString, mtConfirmation,
      [mbYes, mbNo], 0) = mrYes then
      begin
        If Groupbox3.Visible = False then
          Groupbox3.Visible := True;
        Application.CreateForm(TInvoiceForm, InvoiceForm);
        InvoiceForm.KickDrawer();
        InvoiceForm.FreeOnRelease;
        CreateCashUp;
        If (DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat = 0) and
           (DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat = 0) and
           (DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat = 0) and
           (DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat = 0) then
        begin
          showmessage('There is nothing to cashup!');
          Dataform2.CashUpTable.Cancel;
        end;
      end;
end;

procedure TCashUpForm.CreateCashUp();
var
    e: extended;
begin
      DataForm2.CashUpTable.Insert;
      DataForm2.CashUpTable.FieldByName('Date').asInteger := DatetoIntDate(date);
      Dataform2.CashUpTable.FieldByName('User').asString := Dataform2.Query1.Fieldbyname('UserName').asString;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(InvTotal) as Total FROM invoice_db');
        Add('where (InvoiceType = "Cash") and (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat := Dataform2.Query2.Fieldbyname('Total').asFloat;
      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(Ammount) as Total FROM trans_db');
        Add('where (PaymentType = "Cash") and (CUSet is null) and (PaymentBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat + Dataform2.Query2.Fieldbyname('Total').asFloat;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(InvTotal) as Total FROM invoice_db');
        Add('where (InvoiceType = "CreditCard") and (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat := Dataform2.Query2.Fieldbyname('Total').asFloat;
      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(Ammount) as Total FROM trans_db');
        Add('where (PaymentType = "CreditCard") and (CUSet is null) and (PaymentBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat + Dataform2.Query2.Fieldbyname('Total').asFloat;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(InvTotal) as Total FROM invoice_db');
        Add('where (InvoiceType = "Cheques") and (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat := Dataform2.Query2.Fieldbyname('Total').asFloat;
      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(Ammount) as Total FROM trans_db');
        Add('where (PaymentType = "Cheques") and (CUSet is null) and (PaymentBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat + Dataform2.Query2.Fieldbyname('Total').asFloat;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(InvTotal) as Total FROM invoice_db');
        Add('where (InvoiceType = "' + DataForm2.IniFile.ReadString ('Settings', 'OtherDescr', 'Other') + '") and (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat := Dataform2.Query2.Fieldbyname('Total').asFloat;
      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Sum(Ammount) as Total FROM trans_db');
        Add('where (PaymentType = "Other") and (CUSet is null) and (PaymentBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat + Dataform2.Query2.Fieldbyname('Total').asFloat;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT Count(Nr) as Total FROM invoice_db');
        Add('where (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      DataForm2.CashUpTable.FieldByName('TotalInvoices').asInteger := Dataform2.Query2.Fieldbyname('Total').asInteger;

      DataForm2.Query2.Close;
      with DataForm2.Query2.SQL do begin
        Clear;
        Add('SELECT InvTotal, Premium, AmmTendered, InvoiceType FROM invoice_db');
        Add('where (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
      end;
      Dataform2.Query2.Open;
      Dataform2.Query2.DisableControls;
      DataForm2.Query2.First;
      while not DataForm2.Query2.EOF do
      begin
        If copy(Dataform2.Query2.FieldByName('InvoiceType').AsString,1,6) = 'Double' then
        begin
          If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,7,1) = 'C' then
          begin
            e := (Dataform2.Query2.Fieldbyname('AmmTendered').asFloat + DataForm2.Query2.FieldByName('Premium').asFloat) - Dataform2.Query2.FieldByName('InvTotal').asFloat;
            DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealCashTotal').asFloat + (Dataform2.Query2.FieldByName('AmmTendered').asFloat - e);
          end
          else
          begin
            If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,7,1) = 'R' then
            begin
              DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat + Dataform2.Query2.FieldByName('AmmTendered').asFloat;
            end
            else
            begin
              If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,7,1) = 'H' then
              begin
                DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat + Dataform2.Query2.FieldByName('AmmTendered').asFloat;
              end;
            end;
          end;
          If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,8,1) = 'R' then
          begin
            DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealCreditCardTotal').asFloat + Dataform2.Query2.FieldByName('Premium').asFloat;
          end
          else
          begin
            If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,8,1) = 'H' then
            begin
              DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealChequesTotal').asFloat + Dataform2.Query2.FieldByName('Premium').asFloat;
            end
            else
            begin
              If copy(DataForm2.Query2.Fieldbyname('InvoiceType').asString,8,1) = 'O' then
              begin
                DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat := DataForm2.CashUpTable.FieldByName('RealOtherTotal').asFloat + Dataform2.Query2.FieldByName('Premium').asFloat;
              end;
            end;
          end;
        end;
        DataForm2.Query2.Next;
      end;
      Dataform2.Query2.EnableControls;
end;

procedure TCashUpForm.Button2Click(Sender: TObject);
begin
      if (DataForm2.CashUpTablestrState = 'Edit') or (DataForm2.CashUpTablestrState = 'Insert') then
        // ((Dataform2.CashUpTableCountCashTotal.Value = 0) and (Dataform2.CashUpTableCountChequesTotal.Value = 0) and
        //  (Dataform2.CashUpTableCountCreditCardTotal.Value = 0) and (Dataform2.CashUpTableCountOtherTotal.Value = 0)) then
      begin
        Dataform2.CashUpTableTimeStamp.Value := dateTimetostr(now);
        DataForm2.CashUpTable.Post;
        DataForm2.CashUpTable.Refresh;
        DataForm2.Query2.Close;
        with DataForm2.Query2.SQL do begin
          Clear;
          Add('Update invoice_db set CUSet = ' + InttoStr(DataForm2.CashUpTable.FieldbyName('Nr').asInteger));
          Add('where (CUSet is null) and (InvBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '") and (Invclose = "Close")');
        end;
        Dataform2.Query2.ExecSQL;
        with DataForm2.Query2.SQL do begin
          Clear;
          Add('update trans_db set CUSet = ' + Inttostr(DatetoIntDate(date)));
          Add('where (CUSet is null) and (PaymentBy = "' + Dataform2.Query1.Fieldbyname('UserName').asString + '")');
        end;
        Dataform2.Query2.ExecSQL;
      end;
end;

procedure TCashUpForm.Button3Click(Sender: TObject);
var
    RangeString: String;
begin
  DataForm2.Query3.Close;
  with DataForm2.Query3.SQL do begin
    Clear;
    Add('select CUSet from invoice_db');
    Add('where InvBy = "' + Dataform2.Query1.FieldByName('UserName').AsString + '"');
    Add('and Invclose = "Close" and CUSet is null');
    Add('Order by InvNo');
  end;
  DataForm2.Query3.Open;
  If (Dataform2.Query3.RecordCount = 0) or (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
  begin
    if (DataForm2.CashUpTablestrState <> 'Edit') and (DataForm2.CashUpTablestrState <> 'Insert') then
    begin
      if MessageDlg('Are you sure you want to do a end of Shift for user ' + DataForm2.Query1.Fieldbyname('UserName').asString, mtConfirmation,
      [mbYes, mbNo], 0) = mrYes then
      begin
         If RangeCheck.Checked = True then
           RangeString := 'and (InvDate >= ' + InttoStr(DatetoIntDate(RangeBegin.Date)) + ') and (InvDate <= ' + InttoStr(DatetoIntDate(RangeEnd.Date)) + ')'
         else
           RangeString := '';
         DataForm2.Query3.Close;
         with DataForm2.Query3.SQL do begin
           Clear;
           Add('select Nr');
           Add('from invoice_db');
           Add('where InvBy = "' + Dataform2.Query1.FieldByName('UserName').AsString + '"');
           Add('and ShiftSet = "" and (Invclose = "Close" or InvClose = "LaybC")');
           Add(RangeString);
           Add('Order by InvDate');
         end;
         DataForm2.Query3.Open;
         If StrtoBool(DataForm2.IniFile.ReadString ('LayBuySetup', 'Enable', '0')) = True then
         begin
           Dataform2.TransQuery.Close;
           with Dataform2.TransQuery.SQL do begin
             Clear;
             Add('Select * from trans_db');
             Add('where ShiftSet is null');
             Add('and PaymentBy = "' + Dataform2.Query1.FieldByName('UserName').AsString + '"');
             Add('order by Date');
           end;
           DataForm2.TransQuery.Open;
         end;
         EndofShiftexec;
      end;
    end
    else
      showmessage('Accept Cash Up First!');
  end
  else
    showmessage('Cash up first!');
end;

procedure TCashUpForm.EndofShiftexec();
var
  RTotal: Extended;
  PreviousTotalStr, s: String;
  i, i2, Progressi, PeriodStr, ActualInv: Integer;
  InvDateStr: TDateTime;
begin
     if (DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '') <> '') then
     begin
       if DirectoryExists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
       begin
         try
           PreviousTotalStr := '';
           If Dataform2.Query3.RecordCount <> 0 then
           begin
             If DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '') <> '' then
             begin
                ShortDateFormat := DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '');
                EndOfShiftDate.Format := DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '');
             end;
             with TCData.TurbocashDb.Params do
             begin
               clear;
               Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
             end;
{             if Fileexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '') + '\' + InttoStr(DatetoIntDate(date)) + '.csv') then
             begin
               ExtractForm.Memo1.Lines.LoadFromFile(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '') + '\' + InttoStr(DatetoIntDate(date)) + '.csv');
               s := ExtractForm.Memo1.Lines[ExtractForm.Memo1.Lines.Count - 1];
               for i := 0 to 255 do
               begin
                 if copy(lowercase(s),i,3) = '"",' then
                 begin
                   break
                 end;
               end;
               for i2 := i + 3 to 255 do
               begin
                 if copy(lowercase(s),i2,1) = ',' then
                 begin
                   break
                 end;
               end;
               PreviousTotalStr := copy(s, i + 3, (i2 - (i + 3)));
               If (PreviousTotalStr <> '') then
                 ExtractForm.Memo1.Lines.Delete(ExtractForm.Memo1.Lines.Count - 1);
             end
             else
 }           ExtractForm.Memo1.Clear;
             TCData.TurbocashDb.Connected := True;
             TCData.TCTax.Open;
             PeriodStr := 0;
             if not TCData.TCTax.Locate('WAccountID', Inttostr(DataForm2.IniFile.ReadInteger('TCSetup', 'TCTaxId', 0)),[]) then
             begin
               showmessage('TC Tax ID not found run stopped?');
               TCData.TCTax.Close;
               TCData.TurbocashDb.Connected := False;
               Exit;
             end;
             TCData.TCTax.Close;

             RTotal := 0;

             TCData.TCStockTable.Open;
             Dataform2.StockTable.Close;
             with Dataform2.StockTable.SQL do
             begin
               Clear;
               Add('select * from stock_db');
             end;
             Dataform2.StockTable.Open;
             Dataform2.InvoiceTable.Close;
             with Dataform2.InvoiceTable.SQL do
             begin
               Clear;
               Add('select * from invoice_db');
//               Add('where (BranchNo is null)');
//        Add('and
             end;
             Dataform2.InvoiceTable.Open;
             TCData.tblDocHeader.Open;
             TCData.tblDocLine.Open;
             TCData.tblUser.Open;
             TCData.tblAccount.Open;
             TCData.tblMessage.Open;
             TCData.tblGroups.Open;

             ExtractForm.Memo1.Clear;
             ExtractForm.Memo1.Lines.Add('"Inv No","Description"');

             TCData.TCBatTypes.Open;
             TCData.TCBatCon.Open;
             TCData.TCTotal.Open;
             TCData.TCPeriod.Open;
             TCData.TCTransAct.Open;

             UpdateBatchID;
//             Dataform2.tblGlobal.Open;
//             BatchID := Dataform2.tblGlobalWNewBatchID.Value + 1;
//             Dataform2.tblGlobal.Close;

             Listsmenu.JvProgressDialog1.Caption := 'End of Shift Progress';
             Listsmenu.JvProgressDialog1.Show;
             Listsmenu.JvProgressDialog1.Max := Dataform2.Query3.RecordCount;
             Progressi := 0;
             Listsmenu.JvProgressDialog1.Position := Progressi;

             ActualInv := 0;

             Dataform2.Query3.DisableControls;
             DataForm2.Query3.First;
             while not DataForm2.Query3.EOF do
             begin
               if not dataform2.InvoiceTable.Locate('Nr', Inttostr(Dataform2.Query3.Fieldbyname('Nr').asInteger),[]) then
                 showmessage('Invoice not found?');

//               If RangeCheck.Checked then
//               begin
//                 If (DataForm2.InvoiceTableInvDate.Value < DatetoIntDate(RangeBegin.Date)) or (DataForm2.InvoiceTableInvDate.Value > DatetoIntDate(RangeEnd.Date)) then
//                 begin
//                   Dataform2.Query3.Next;
//                   Continue;
//                 end;
//               end;

               If EnableEndofShiftDate.Checked = True then
               begin
                 InvDateStr := EndOfShiftDate.Date;
                 PeriodID := FindPeriod(EndOfShiftDate.Date);
               end
               else
               begin
                 PeriodID := FindPeriod(StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value)));
//                 showmessage(IntDatetoString(Dataform2.InvoiceTableInvDate.Value));
                 If (PeriodStr <> PeriodID) and (PeriodStr <> 0) then
                 begin
                   PeriodID := PeriodStr;
                   TCPostTransaction('********', '0',InvDateStr, RTotal);
//                   If RangeCheck.Checked = True then
//                     TCPostTransaction('********', '0',RangeEnd.Date, RTotal)
//                   else
//                     TCPostTransaction('********', '0',EndOfShiftDate.Date, RTotal);
                   BatConPost();
                   UpdateBatchID;
                   RTotal := 0;
                   ActualInv := 0;
                   PeriodID := FindPeriod(StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value)));
                 end;
                 PeriodStr := PeriodID;
                 InvDateStr := StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value));
               end;

               If CreateUnpostedInvoice('N' + InttoStr(Dataform2.InvoiceTableBranchNo.Value) + InttoStr(Dataform2.InvoiceTable.Fieldbyname('InvNo').asInteger),InvDateStr) = False then
               begin
                 DataForm2.Query3.Next;
                 Continue;
               end;

               Inc(ActualInv);

               If (Dataform2.InvoiceTableInvClose.Value <> 'LaybC') and (Dataform2.InvoiceTableGLDebNo.Value = DataForm2.IniFile.ReadString ('TCSetup', 'TCCashDebNo', '')) then
               begin
                 TCPostTransaction(LastDocNo, InttoStr(TCData.tblAccount.Fieldbyname('WAccountID').asInteger), TCData.tblDocHeaderDDate.Value, DataForm2.InvoiceTableInvTotal.Value);
                 RTotal := RTotal + DataForm2.InvoiceTableInvTotal.Value;
               end
               else
               begin
                 If (Dataform2.InvoiceTableInvClose.Value = 'Close') and (Dataform2.InvoiceTableGLDebNo.Value <> DataForm2.IniFile.ReadString ('TCSetup', 'TCCashDebNo', '')) and
                    (Dataform2.InvoiceTableAmmTendered.Value <> 0) then
                 begin
                   If Dataform2.InvoiceTableAmmTendered.Value > Dataform2.InvoiceTableInvTotal.Value then
                   begin
                     TCPostTransaction(LastDocNo, InttoStr(TCData.tblAccount.Fieldbyname('WAccountID').asInteger), TCData.tblDocHeaderDDate.Value, DataForm2.InvoiceTableInvTotal.Value);
                     RTotal := RTotal + DataForm2.InvoiceTableInvTotal.Value;
                   end
                   else
                   begin
                     TCPostTransaction(LastDocNo, InttoStr(TCData.tblAccount.Fieldbyname('WAccountID').asInteger), TCData.tblDocHeaderDDate.Value, (Dataform2.InvoiceTableAmmTendered.Value + Dataform2.InvoiceTablePremium.Value));
                     RTotal := RTotal + (Dataform2.InvoiceTableAmmTendered.Value + Dataform2.InvoiceTablePremium.Value);
                   end;
                 end;
               end;

               Inc(Progressi);
               ListsMenu.JvProgressDialog1.Position := Progressi;
               ListsMenu.JvProgressDialog1.Text := InttoStr(Progressi) + ' / ' + InttoStr(ListsMenu.JvProgressDialog1.Max);
               Application.ProcessMessages;

               DataForm2.Query3.Next;
             end;
             Dataform2.Query3.EnableControls;
             ListsMenu.JvProgressDialog1.Hide;
             If ActualInv <> 0 then
             begin
               TCPostTransaction('********', '0',InvDateStr, RTotal);
//               If RangeCheck.Checked = True then
//                 TCPostTransaction('********', '0',RangeEnd.Date, RTotal)
//               else
//                 TCPostTransaction('********', '0',EndOfShiftDate.Date, RTotal);
               BatConPost();
             end;

             TCData.TCBatTypes.Close;
             TCData.TCBatCon.Close;
             TCData.TCTotal.Close;
             TCData.TCPeriod.Close;
             TCData.TCTransAct.Close;

             TCData.tblDocHeader.Close;
             TCData.tblDocLine.Close;
             TCData.tblUser.Close;
             TCData.TCStockTable.Close;
             TCData.tblMessage.Close;
             TCData.tblGroups.Close;
             TCData.tblAccount.Close;
             Dataform2.InvoiceTable.Close;
             DataForm2.InvoiceItemTable.Close;
             Dataform2.StockTable.Close;
             DataForm2.Query3.Close;
             TCData.TurbocashDb.Connected := False;
             ShortDateFormat := 'yyyy/MM/dd';
             EndOfShiftDate.Format := 'yyyy/MM/dd';
             If StrtoBool(DataForm2.IniFile.ReadString ('LayBuySetup', 'Enable', '0')) = True then
             begin
               PaymentsEndOfShift;
             end;
             If ExtractForm.SaveDialog.Execute then
             begin
               ExtractForm.Memo1.Lines.SaveToFile(Extractform.SaveDialog.FileName);
             end;
             Extractform.Memo1.Clear;
             showmessage('Finished with End of Shift!');
           end
           else
             showmessage('Nothing to end of Shift!');
         except
         begin
           ShowMessage('end of shift didn''t finish, with an error, Please Try Again or contact support!');
           Dataform2.InvoiceTable.Close;
           DataForm2.InvoiceItemTable.Close;
           Dataform2.StockTable.Close;
           DataForm2.Query3.Close;
           TCData.TurbocashDb.Connected := False;
         end;
         raise;
         end;
       end
       else
         showmessage('Turbocash path not valid!');
     end
     else
       showmessage('No Turbocash path!');
end;

procedure TCashUpForm.Button4Click(Sender: TObject);
var
    RangeString: String;
begin
  If (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
  begin
    if (DataForm2.CashUpTablestrState <> 'Edit') and (DataForm2.CashUpTablestrState <> 'Insert') then
    begin
      if MessageDlg('Are you sure you want to do a end of Shift for all users', mtConfirmation,
      [mbYes, mbNo], 0) = mrYes then
      begin
         If RangeCheck.Checked = True then
           RangeString := 'and (InvDate >= ' + InttoStr(DatetoIntDate(RangeBegin.Date)) + ') and (InvDate <= ' + InttoStr(DatetoIntDate(RangeEnd.Date)) + ')'
         else
           RangeString := '';
         DataForm2.Query3.Close;
         with DataForm2.Query3.SQL do begin
           Clear;
           Add('select Nr');
           Add('from invoice_db');
           Add('where ShiftSet = "" and (Invclose = "Close" or InvClose = "LaybC")');
           Add(RangeString);
           Add('Order by InvDate');
         end;
         DataForm2.Query3.Open;
         If StrtoBool(DataForm2.IniFile.ReadString ('LayBuySetup', 'Enable', '0')) = True then
         begin
           Dataform2.TransQuery.Close;
           with Dataform2.TransQuery.SQL do begin
             Clear;
             Add('Select * from trans_db');
             Add('where ShiftSet is null');
             Add('order by Date');
           end;
           DataForm2.TransQuery.Open;
         end;
         EndofShiftexec;
      end;
    end
    else
      showmessage('Accept Cash Up First!');
  end
  else
    showmessage('Manager should End Shift!');
end;

procedure TCashUpForm.PaymentsEndOfShift();
var
    Progressi, PeriodStr: Integer;
    InvDateStr: TDateTime;
begin
      BatchLineCount := 0;
      BatchTotal := 0;
      PeriodStr := 0;
      with TCData.TurbocashDb.Params do
      begin
        clear;
        Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
      end;
      TCData.TurbocashDb.Connected := True;
      TCData.tblAccount.Open;
      TCData.TCBatTypes.Open;
      TCData.TCBatCon.Open;
      TCData.TCTotal.Open;
      TCData.tblMessage.Open;
      TCData.TCPeriod.Open;
      TCData.TCTransAct.Open;
      TCData.tblUser.Open;

//      PeriodID := FindPeriod(EndOfShiftDate.Date);

      Dataform2.InvoiceTable.Close;
      with Dataform2.InvoiceTable.SQL do
      begin
        Clear;
        Add('select * from invoice_db');
      end;
      DataForm2.InvoiceTable.Open;

      UpdateBatchID;
//      Dataform2.tblGlobal.Open;
//      BatchID := Dataform2.tblGlobalWNewBatchID.Value + 1;
//      Dataform2.tblGlobal.Close;

      Listsmenu.JvProgressDialog1.Caption := 'Payments End of Shift Progress';
      Listsmenu.JvProgressDialog1.Show;
      Listsmenu.JvProgressDialog1.Max := Dataform2.TransQuery.RecordCount;
      Progressi := 0;
      Listsmenu.JvProgressDialog1.Position := Progressi;

      DataForm2.TransQuery.DisableControls;
      DataForm2.TransQuery.First;
      while not DataForm2.TransQuery.EOF do
      begin
        If RangeCheck.Checked then
        begin
          If (DataForm2.TransQueryDate.Value <= DatetoIntDate(RangeBegin.Date)) or (DataForm2.TransQueryDate.Value >= DatetoIntDate(RangeEnd.Date)) then
          begin
            Dataform2.TransQuery.Next;
            Continue;
          end;
        end;
        If EnableEndofShiftDate.Checked = True then
        begin
//          InvDateStr := EndOfShiftDate.Date;
          PeriodID := FindPeriod(EndOfShiftDate.Date);
        end
        else
        begin
//          InvDateStr := StrtoDate(IntDatetoString(Dataform2.TransQueryDate.Value));
          PeriodID := FindPeriod(StrtoDate(IntDatetoString(Dataform2.TransQueryDate.Value)));
          If (PeriodStr <> PeriodID) and (PeriodStr <> 0) then
          begin
            PeriodID := PeriodStr;
            TCPostTransaction('********', '0',InvDateStr, BatchTotal);
//            If RangeCheck.Checked = True then
//              TCPostTransaction('********', '0',RangeEnd.Date, BatchTotal)
//            else
//              TCPostTransaction('********', '0',EndOfShiftDate.Date, BatchTotal);
            BatConPost();
            UpdateBatchID;
            BatchTotal := 0;
            PeriodID := FindPeriod(StrtoDate(IntDatetoString(Dataform2.TransQueryDate.Value)));
          end;
          PeriodStr := PeriodID;
          InvDateStr := StrtoDate(IntDatetoString(Dataform2.TransQueryDate.Value));
        end;

        If not TCData.tblUser.Locate('SUserName', Dataform2.TransQueryPaymentBy.Value, []) then
        begin
          showmessage('TC User Not Found!');
        end;
        MyCurrentUser := TCData.tblUserWUserID.Value;
        DataForm2.InvoiceTable.Locate('InvNo',Dataform2.TransQueryLinkID.Value,[]);
        TCPostTransaction('LB' + InttoStr(DataForm2.TransQueryNr.Value) + '-' + InttoStr(Dataform2.InvoiceTableInvNo.Value), Dataform2.IniFile.ReadString ('TCSetup', 'TCLayBuyCredAccNo', ''), StrtoDate(IntDatetoString(Dataform2.TransQueryDate.Value)), Dataform2.TransQueryAmmount.Value);
        BatchTotal := Batchtotal + Dataform2.TransQueryAmmount.Value;
        Dataform2.Query1.Close;
        with DataForm2.Query1.SQL do begin
          Clear;
          Add('update trans_db set ShiftSet = ' + Inttostr(DatetoIntDate(date)));
          Add('where nr = ' + InttoStr(Dataform2.TransQueryNr.Value));
        end;
        DataForm2.Query1.ExecSQL;

        Inc(Progressi);
        ListsMenu.JvProgressDialog1.Position := Progressi;
        ListsMenu.JvProgressDialog1.Text := InttoStr(Progressi) + ' / ' + InttoStr(ListsMenu.JvProgressDialog1.Max);

        Dataform2.TransQuery.Next;
      end;
      dataForm2.TransQuery.EnableControls;
      ListsMenu.JvProgressDialog1.Hide;
      TCPostTransaction('********', '0',InvDateStr, BatchTotal);
//      If RangeCheck.Checked = True then
//        TCPostTransaction('********', '0',RangeEnd.Date, BatchTotal)
//      else
//        TCPostTransaction('********', '0',EndOfShiftDate.Date, BatchTotal);
      BatConPost();
//      Dataform2.tblGlobal.Open;
//      Dataform2.tblGlobal.Edit;
//      Dataform2.tblGlobalWNewBatchID.Value := Dataform2.tblGlobalWNewBatchID.Value + 2;
//      Dataform2.tblGlobal.Post;
//      Dataform2.tblGlobal.Close;
      DataForm2.TransQuery.Close;
      Dataform2.InvoiceTable.Close;
      TCData.tblAccount.Close;
      TCData.TCBatTypes.Close;
      TCData.TCBatCon.Close;
      TCData.TCTotal.Close;
      TCData.tblMessage.Close;
      TCData.TCPeriod.Close;
      TCData.TCTransAct.Close;
      TCData.tblUser.Close;
      TCData.TurbocashDb.Connected := False;
//      showmessage('Finished with Payments end of Shift!');
end;

procedure TCashUpForm.RangeCheckClick(Sender: TObject);
begin
        If RangeCheck.Checked then
        begin
          if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
          begin
            RangeBegin.Enabled := True;
            RangeEnd.Enabled := True;
          end
          else
          begin
            RangeCheck.Checked := False;
            showMessage('You don''t have permision to go in here!');
          end;
        end
        else
        begin
          RangeBegin.Enabled := False;
          RangeEnd.Enabled := False;
        end;
end;

procedure TCashUpForm.EnableEndofShiftDateClick(Sender: TObject);
begin
        If EnableEndofShiftDate.Checked = True then
          EndOfShiftDate.Enabled := True
        else
          EndOfShiftDate.Enabled := False;
end;

procedure TCashUpForm.JvBitBtn1Click(Sender: TObject);
var
      i: Integer;
      RangeString: String;
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to Close all Purchase invoices! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Application.CreateForm(TPurchaseForm, PurchaseForm);
      If RangeCheck.Checked = True then
        RangeString := 'and (InvDate >= ' + InttoStr(DatetoIntDate(RangeBegin.Date)) + ') and (InvDate <= ' + InttoStr(DatetoIntDate(RangeEnd.Date)) + ')'
      else
        RangeString := '';
      Dataform2.Query3.Close;
      with Dataform2.Query3.SQL do
      begin
        Clear;
        Add('select Nr, InvClose from invoice_db');
        Add('where InvClose = ''PurcC''');
        Add('and ((BranchNo = 0) or (BranchNo is null))');
        Add('and ShiftSet = ""');
        Add(RangeString);
        Add('order by InvNo');
      end;
      Dataform2.Query3.Open;
      Dataform2.InvoiceTable.Close;
      with Dataform2.InvoiceTable.SQL do
      begin
        Clear;
        Add('select * from invoice_db');
      end;
      Dataform2.InvoiceTable.Open;
      DataForm2.PurchaseItemTable.Open;
      Dataform2.StockTable.Close;
      with Dataform2.StockTable.SQL do
      begin
        Clear;
        Add('select * from stock_db');
        Add('where BranchNo is null');
      end;
      Dataform2.StockTable.Open;

      if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
      begin
        If DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '') <> '' then
          ShortDateFormat := DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '');
        with TCData.TurbocashDb.Params do
        begin
          clear;
          Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
        end;
        TCData.TurbocashDb.Open;
        TCData.TCTax.Open;
        if not TCData.TCTax.Locate('WAccountID', Inttostr(DataForm2.IniFile.ReadInteger('TCSetup', 'TCInputTaxId', 0)),[]) then
        begin
          showmessage('TC Tax ID nor found run stopped?');
          TCData.TCTax.Close;
          Exit;
        end;
        TCData.TCTax.Close;
        TCData.tblAccount.Open;
        TCData.tblAccount.Filtered := False;
        TCData.tblAccount.Filter := 'WAccountTypeID=2';
        TCData.tblAccount.Filtered := True;
        TCData.TCStockTable.Open;
        TCData.creditordetail.Open;
        TCData.TCTotal.Open;
        TCData.tblDocHeader.Open;
        TCData.tblDocLine.Open;
        TCData.tblUser.Open;
        TCData.tblGroups.Open;
        TCData.tblMessage.Open;
        ExtractForm.Memo1.Clear;
        ExtractForm.Memo1.Lines.Add('"Inv No","Description"');
      end;
      Dataform2.Query3.DisableControls;

      ListsMenu.JvProgressDialog1.Caption := 'Closing Purchase orders';
      ListsMenu.JvProgressDialog1.Position := 0;
      ListsMenu.JvProgressDialog1.Max := Dataform2.Query3.RecordCount;
      i := 1;
      ListsMenu.JvProgressDialog1.Show;
      ListsMenu.JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(ListsMenu.JvProgressDialog1.Max);

      Dataform2.Query3.First;
      while not Dataform2.Query3.EOF do
      begin
        If not Dataform2.InvoiceTable.Locate('Nr',Dataform2.Query3.FieldbyName('Nr').asInteger,[]) then
        begin
          ExtractForm.Memo1.Lines.Add('"' + InttoStr(Dataform2.InvoiceTableBranchNo.Value) + '/' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + '","Inv can''t be found inv skipped","' + Dataform2.InvoiceTable.Fieldbyname('InvBy').asString + '"');
          Dataform2.Query1.Next;
          Continue;
        end;

        If (Dataform2.InvoiceTableGLDebNo.Value = '') and (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
        begin
          CreateTCCreditor();
        end
        else
        begin
          TCData.TCQuery.Close;
          with TCData.TCQuery.SQL do
          begin
            Clear;
            Add('select SAccountCode from Account.DB');
            Add('where SAccountCode = "' + DataForm2.InvoiceTable.Fieldbyname('GLDebNo').asString + '"');
          end;
          TCData.TCQuery.Open;
          If TCData.TCQuery.RecordCount = 0 then
            CreateTCCreditor();
        end;
 {       If Dataform2.InvoiceTableInvNo.Value = 0 then
        begin
          Dataform2.InvoiceTable.Edit;
          Dataform2.InvoiceTableInvNo.Value := DataForm2.IniFile.ReadInteger('Invoice', 'PurchaseInvNo', 0) + 1;
          DataForm2.IniFile.WriteInteger('Invoice', 'PurchaseInvNo', DataForm2.InvoiceTable.Fieldbyname('InvNo').asInteger);
          dataform2.InvoiceTable.Post;
        end;
  }      If CreateUnpostedPurcInvoice('P' + InttoStr(Dataform2.InvoiceTable.Fieldbyname('InvNo').asInteger), StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value))) = False then
        begin
          ExtractForm.Memo1.Lines.Add('"' + InttoStr(Dataform2.InvoiceTableBranchNo.Value) + '/' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + '","Something went wrong Purchase inv skipped","' + Dataform2.InvoiceTable.Fieldbyname('InvBy').asString + '"');
        end;
   {     else
        begin
          Dataform2.Query4.Close;
          with DataForm2.Query4.SQL do begin
            Clear;
            Add('SELECT SUM(Round(CostPrice * Qty,2) - (Round(CostPrice * Qty,2) * (Discount / 100))) as Total FROM invoiceitem_db');
            Add('where LinkId = ' + inttostr(Dataform2.InvoiceTable.Fieldbyname('Nr').asInteger));
          end;
          Dataform2.Query4.Open;
          Dataform2.InvoiceTable.Edit;
          Dataform2.InvoiceTableInvClose.Value := 'PurcC';
          Dataform2.InvoiceTableInvTotal.Value := Dataform2.Query4.FieldbyName('Total').Value;
          Dataform2.InvoiceTable.Post;
        end;
 }
        Inc(i);
        ListsMenu.JvProgressDialog1.Position := i;
        ListsMenu.JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(ListsMenu.JvProgressDialog1.Max);
        Application.ProcessMessages;

        Dataform2.Query3.Next;
      end;
      Dataform2.Query3.EnableControls;
      Dataform2.Query3.Close;
      Dataform2.Query4.Close;
      Dataform2.InvoiceTable.Close;
      DataForm2.PurchaseItemTable.Close;
      Dataform2.StockTable.Close;
      ListsMenu.JvProgressDialog1.Hide;
      if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
      begin
        TCData.TCStockTable.Close;
        TCData.tblAccount.Close;
        TCData.tblAccount.Filtered := False;
        TCData.creditordetail.Close;
        TCData.TCTotal.Close;
        TCData.TCQuery.Close;
        TCData.tblDocHeader.Close;
        TCData.tblDocLine.Close;
        TCData.tblUser.Close;
        TCData.tblMessage.Close;
        TCData.tblGroups.Close;
        TCData.TurbocashDb.Close;
      end;
      If ExtractForm.SaveDialog.Execute then
      begin
        ExtractForm.Memo1.Lines.SaveToFile(Extractform.SaveDialog.FileName);
      end;
      Extractform.Memo1.Clear;
      Purchaseform.FreeOnRelease;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

end.
