unit StockTransferFrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, JvExDBGrids, JvDBGrid, StdCtrls, Buttons,
  JvExButtons, JvBitBtn, JvExStdCtrls, JvEdit, DBCtrls, db, RpDefine,
  RpBase, RpSystem, JvExControls, JvComponent, JvSpeedButton, UtilsUnit,
  JvComponentBase, JvFormAutoSize, Menus;

type
  TStockTransferForm = class(TForm)
    JvDBGrid1: TJvDBGrid;
    GroupBox1: TGroupBox;
    JvDBGrid2: TJvDBGrid;
    GroupBox2: TGroupBox;
    JvDBGrid3: TJvDBGrid;
    Label1: TLabel;
    DescriptionSearch: TJvEdit;
    Button5: TButton;
    Button7: TButton;
    Label2: TLabel;
    Barcodesearch: TJvEdit;
    Button6: TButton;
    Button8: TButton;
    JvBitBtn5: TJvBitBtn;
    JvBitBtn6: TJvBitBtn;
    GroupBox3: TGroupBox;
    Label3: TLabel;
    DBText1: TDBText;
    Label4: TLabel;
    DBText2: TDBText;
    JvBitBtn7: TJvBitBtn;
    JvBitBtn8: TJvBitBtn;
    JvBitBtn9: TJvBitBtn;
    JvBitBtn10: TJvBitBtn;
    JvBitBtn11: TJvBitBtn;
    Reporttr: TRvSystem;
    JvBitBtn12: TJvBitBtn;
    JvBitBtn13: TJvBitBtn;
    JvBitBtn14: TJvBitBtn;
    JvSpeedButton1: TJvSpeedButton;
    Button1: TButton;
    JvFormAutoSize1: TJvFormAutoSize;
    MainMenu1: TMainMenu;
    Edit1: TMenuItem;
    Viewonlyopentransfers1: TMenuItem;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure JvDBGrid2KeyPress(Sender: TObject; var Key: Char);
    procedure Button5Click(Sender: TObject);
    procedure Button7Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button8Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure JvBitBtn8Click(Sender: TObject);
    procedure JvBitBtn5Click(Sender: TObject);
    procedure JvDBGrid2DblClick(Sender: TObject);
    procedure JvBitBtn6Click(Sender: TObject);
    procedure JvBitBtn9Click(Sender: TObject);
    procedure JvDBGrid3Enter(Sender: TObject);
    procedure JvDBGrid3Exit(Sender: TObject);
    procedure JvBitBtn10Click(Sender: TObject);
    procedure ReporttrPrint(Sender: TObject);
    procedure JvBitBtn11Click(Sender: TObject);
    procedure JvBitBtn12Click(Sender: TObject);
    procedure JvBitBtn13Click(Sender: TObject);
    procedure JvBitBtn14Click(Sender: TObject);
    procedure JvDBGrid2TitleBtnClick(Sender: TObject; ACol: Integer;
      Field: TField);
    procedure JvSpeedButton1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Viewonlyopentransfers1Click(Sender: TObject);
  private
    procedure DeleteStockItems;
    procedure CloseTransfer;
    procedure Print(Report: TBaseReport);
    procedure StockOpen;
    procedure StockTrnsferOpen;
    { Private declarations }
  public
    { Public declarations }
  protected
    procedure WMSysCommand(var Message: TWMSysCommand); message WM_SYSCOMMAND;
  end;

var
  StockTransferForm: TStockTransferForm;
  Qtytest: extended;
  StockOrder: String;

implementation
    uses Datafrm2, StockSearchFrm, UserFrm, BarcodePrintingFrm;

{$R *.dfm}

procedure TStockTransferForm.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
        Dataform2.StockTable.Close;
        dataform2.StockTrnsferTable.Close;
        Dataform2.StocktrnsferItemTable.Close;
        StockTransferForm.FreeOnRelease;
        StockSearchForm.FreeOnRelease;
end;

procedure TStockTransferForm.JvDBGrid2KeyPress(Sender: TObject;
  var Key: Char);
begin
    if Key = #13 then
    begin
      JvBitBtn5.Click;
    end
    else
      DataForm2.StockTable.Locate(Order, Key, [loPartialKey, loCaseInsensitive]);
end;

procedure TStockTransferForm.Button5Click(Sender: TObject);
begin
  Dataform2.StockTable.First;
  StockSearchForm.Descriptionsearch.Text := DescriptionSearch.Text;
  StockSearchForm.SearchDescription();
end;

procedure TStockTransferForm.Button7Click(Sender: TObject);
begin
  DataForm2.StockTable.Next;
  StockSearchForm.Descriptionsearch.Text := DescriptionSearch.Text;
  StockSearchForm.SearchDescription();
end;

procedure TStockTransferForm.Button6Click(Sender: TObject);
begin
  Dataform2.StockTable.First;
  StockSearchForm.Barcodesearch.Text := BarcodeSearch.Text;
  StockSearchForm.SearchBarcode();
end;

procedure TStockTransferForm.Button8Click(Sender: TObject);
begin
  DataForm2.StockTable.Next;
  StockSearchForm.Barcodesearch.Text := BarcodeSearch.Text;
  StockSearchForm.SearchBarcode();
end;

procedure TStockTransferForm.FormShow(Sender: TObject);
begin
      JvFormAutoSize1.Active := True;
      Width := Screen.Width;
      StockOrder := 'Description';
      StockOpen;
      StockTrnsferOpen;
//      DataForm2.StockTrnsferTable.Filtered := False;
//      dataForm2.StockTrnsferTable.Filter := 'Branch_no = ' + InttoStr(DataForm2.BranchTableNr.Value);
//      DataForm2.StockTrnsferTable.Filtered := True;
      Dataform2.StocktrnsferItemTable.Open;
//      Dataform2.StockTrnsferTable.Last;
      Application.CreateForm(TStockSearchForm, StockSearchForm);
      StockTransferForm.Caption := StockTransferForm.Caption + ' of ' + Dataform2.BranchTableName.Value;
//      if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
//        JvDBGrid3.Columns[1].Visible := False
//      else
//        JvDBGrid3.Columns[0].Visible := False;
end;

procedure TStockTransferForm.JvBitBtn8Click(Sender: TObject);
begin
      if MessageDlg('Are you sure you want to create a new Transfer for Branch ' + Dataform2.BranchTableName.Value + '!',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        DataForm2.StockTrnsferTable.Insert;
        DataForm2.StockTrnsferTableBranch_no.Value := DataForm2.BranchTableNr.Value;
        DataForm2.StockTrnsferTableDate.Value := DatetoIntDate(date);
        Dataform2.StockTrnsferTable.Post;
        DataForm2.StockTrnsferTable.Refresh;
      end;
end;

procedure TStockTransferForm.JvBitBtn5Click(Sender: TObject);
begin
       if Dataform2.StockTrnsferTableClosed.Value = 'False' then
       begin
         DataForm2.StocktrnsferItemTable.Insert;
         Dataform2.StocktrnsferItemTableLinkID.Value := DataForm2.StockTrnsferTableNr.Value;
         Dataform2.StocktrnsferItemTableStockNo.Value := Dataform2.StockTableNr.Value;
         Dataform2.StocktrnsferItemTableBeforeQty.Value := Dataform2.StockTableQty.Value;
         DataForm2.StocktrnsferItemTableQty.Value := 1;
         DataForm2.StocktrnsferItemTableDescription.Value := Dataform2.StockTableDescription.Value;
         Dataform2.StocktrnsferItemTableTCStockNo.Value := Dataform2.StockTableTCStockNo.Value;
         DataForm2.StocktrnsferItemTable.Post;
         JvDBGrid3.SetFocus;
         JvDBGrid3.Col := 2;
       end
       else
         showmessage('Transfer already closed!');
end;

procedure TStockTransferForm.JvDBGrid2DblClick(Sender: TObject);
begin
       JvBitBtn5.Click;
end;

procedure TStockTransferForm.JvBitBtn6Click(Sender: TObject);
begin
      if MessageDlg('Are you sure you want to remove Stock Item ' + DataForm2.StocktrnsferItemTableDescription.Value + '!',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        DataForm2.StocktrnsferItemTable.Delete;
      end;
end;

procedure TStockTransferForm.JvBitBtn9Click(Sender: TObject);
begin
    if (Dataform2.StockTrnsferTableClosed.Value = 'False') or (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
    begin
      if MessageDlg('Are you sure you want to remove Transfer for ' + DataForm2.BranchTableName.Value + '!',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        DeleteStockItems;
        DataForm2.StockTrnsferTable.Delete;
      end;
    end
    else
      showmessage('Transfer already closed call Manager!');
end;

procedure TStockTransferForm.DeleteStockItems();
begin
        DataForm2.Query2.Active := False;
        with DataForm2.Query2.SQL do begin
                Clear;
                Add('Delete FROM stocktrnsferitem_db');
                Add('WHERE LinkId = ' + inttostr(DataForm2.StockTrnsferTableNr.Value));
        end;
        DataForm2.Query2.ExecSQL;
end;

procedure TStockTransferForm.JvDBGrid3Enter(Sender: TObject);
begin
        QtyTest := DataForm2.StocktrnsferItemTableQty.Value;
        JvDBGrid3.Columns.Items[1];
end;

procedure TStockTransferForm.JvDBGrid3Exit(Sender: TObject);
begin
        if Floattostrf(DataForm2.StocktrnsferItemTableQty.Value,ffNumber,17,2) <> Floattostrf(QtyTest,ffNumber,17,2) then
        begin
          if (DataForm2.StocktrnsferItemTablestrState = 'Edit') or (DataForm2.StocktrnsferItemTablestrState = 'Insert') then
          begin
            DataForm2.StocktrnsferItemTable.Post;
          end;
        end;
end;

procedure TStockTransferForm.CloseTransfer();
begin
      DataForm2.StockTable.DisableControls;
      DataForm2.StocktrnsferItemTable.DisableControls;
      try
        DataForm2.StocktrnsferItemTable.First;
        while not DataForm2.StocktrnsferItemTable.EOF do
        begin
          if not Dataform2.StockTable.Locate('TCStockNo', DataForm2.StocktrnsferItemTableTCStockNo.Value,[]) then
          begin
            if not Dataform2.StockTable.Locate('Nr', DataForm2.StocktrnsferItemTableStockNo.Value,[]) then
            begin
              showmessage('Run exits with error!');
              break;
            end;
          end;
//          DataForm2.Query3.Close;
//          with DataForm2.Query3.SQL do begin
//                Clear;
//                Add('update stock_db');
//                Add('set Qty = Qty - ' + floattostr(DataForm2.StocktrnsferItemTableQty.Value));
//                Add('where Nr = ' + Inttostr(DataForm2.StocktrnsferItemTableStockNo.Value));
//          end;
//          DataForm2.Query3.ExecSQL;
          DataForm2.Query2.Close;
          with Dataform2.Query2.SQL do begin
            Clear;
            Add('select Nr, BranchNo, BranchMainStockNo from stock_db');
            Add('where BranchNo = ' + InttoStr(DataForm2.StockTrnsferTableBranch_no.Value));
            Add('and TCStockNo = "' + DataForm2.StocktrnsferItemTableTCStockNo.Value + '"');
          end;
          DataForm2.Query2.Open;
          If DataForm2.Query2.RecordCount = 1 then
          begin
            DataForm2.Query3.Close;
            with DataForm2.Query3.SQL do begin
                Clear;
                Add('update Stock_db');
                Add('set Qty = Qty + ' + floattostr(DataForm2.StocktrnsferItemTableQty.Value));
                Add('where TCStockNo = "' + DataForm2.StocktrnsferItemTableTCStockNo.Value + '"');
                Add('and BranchNo = ' + Inttostr(Dataform2.BranchTableNr.Value));
            end;
            DataForm2.Query3.ExecSQL;
          end
          else
          begin
            DataForm2.Query3.Active := False;
            with DataForm2.Query3.SQL do begin
                Clear;
                Add('insert into stock_db(Description,DateCreated,DateChanged,CostPrice,SalesPrice,Barcode,Qty,AlertQty,NonStockItem,StartingQty,TCStockNo,BranchNo,SyncHQ,BranchMainStockNo) values ');
                Add('("' + Dataform2.StockTableDescription.Value + '",' + InttoStr(datetoIntDate(Date)) + ',' + InttoStr(DatetoIntDate(Date)) + ',' + Floattostr(DataForm2.StockTableCostPrice.Value) + ',' + FloattoStr(DataForm2.StockTableSalesPrice.Value) + ',"' + DataForm2.StockTableBarcode.Value + '",' + FloattoStr(Dataform2.StocktrnsferItemTableQty.Value) + ',' + Floattostr(DataForm2.StockTableAlertQty.Value) + ',"' + Dataform2.StockTableNonStockItem.Value + '",' + Floattostr(DataForm2.StockTableStartingQty.Value) + ',"' + DataForm2.StockTableTCStockNo.Value + '",' + InttoStr(DataForm2.BranchTableNr.Value) + ',' + InttoStr(DataForm2.StockTableSyncHQ.Value) + ',' + InttoStr(DataForm2.StockTableNr.Value) + ')');
            end;
            DataForm2.Query3.ExecSQL;
          end;
          DataForm2.StockTable.Requery();

          DataForm2.StocktrnsferItemTable.Next;
        end;
      finally
      end;
      if (DataForm2.StockTrnsferTablestrState <> 'Edit') and (DataForm2.StockTrnsferTablestrState <> 'Insert') then
        Dataform2.StockTrnsferTable.Edit;
      Dataform2.StockTrnsferTableClosed.Value := 'True';
      Dataform2.StockTrnsferTable.Post;
      DataForm2.StocktrnsferItemTable.EnableControls;
      Dataform2.StockTable.EnableControls;
      Dataform2.StockTable.Requery;
      DataForm2.Query2.Close;
end;

procedure TStockTransferForm.JvBitBtn10Click(Sender: TObject);
begin
        if (DataForm2.StockTrnsferTablestrState = 'Edit') or (DataForm2.StockTrnsferTablestrState = 'Insert') then
        begin
          DataForm2.StockTrnsferTable.Post;
        end;
end;

procedure TStockTransferForm.Print(Report:TBaseReport);
var
        count: Integer;
begin
      with report do
      begin
        count := 0;
        MarginLeft := 0.250;
        MarginTop := 0.250;
        SetFont('Arial',9);
        Bold := true;
        UserForm.Memo2.Lines.loadfromfile(Dataform2.ProgramPath + '\client.txt');
        for count := 0 to UserForm.Memo2.Lines.Count - 1 do
        begin
          printLeft(UserForm.Memo2.Lines[count], 0.250);
          NewLine;
        end;
        NewLine;
        NewLine;
        PrintLeft('Branch Stock Transmittal sheet', 0.250);
        NewLine;
        NewLine;
        PrintLeft('For Branch ' + DataForm2.BranchTableName.Value + ' on Date ' + inttostr(DataForm2.StockTrnsferTableDate.Value), 0.250);
        Bold := False;
        NewLine;
        NewLine;
        ClearTabs;
        SetTab(0.3, pjLeft,1,0,0,0);
        SetTab(NA, pjLeft,1,0,0,0);
        SetTab(NA, pjLeft,2,0,0,0);
        SetTab(NA, pjLeft,1.5,0,0,0);
        PrintTab('Stock No');
        PrintTab('TC Stock No');
        PrintTab('Description');
//        PrintTab('Allocations In / Out');
        NewLine;
        DataForm2.StocktrnsferItemTable.DisableControls;
        DataForm2.StocktrnsferItemTable.first;
        try
          while not DataForm2.StocktrnsferItemTable.EOF do
          begin
            Inc(count);
            If count > 45 then
            begin
              NewPage;
              count := 0;
              PrintTab('Stock No');
              PrintTab('TC Stock No');
              PrintTab('Description');
//              PrintTab('Allocations In / Out');
              NewLine;
            end;
            PrintTab(InttoStr(DataForm2.StocktrnsferItemTableStockNo.Value));
            DataForm2.Query2.Close;
            with Dataform2.Query2.SQL do begin
              Clear;
              Add('select Nr, TcStockNo from stock_db');
              Add('where Nr = ' + InttoStr(DataForm2.StocktrnsferItemTableStockNo.Value));
            end;
            DataForm2.Query2.Open;
            PrintTab(Dataform2.Query2.FieldByName('TCStockno').asString);
            PrintTab(DataForm2.StocktrnsferItemTableDescription.Value);
            PrintTab(Floattostr(DataForm2.StocktrnsferItemTableQty.Value));
            NewLine;
            DataForm2.StocktrnsferItemTable.Next;
          end;
        finally
        end;
        DataForm2.StocktrnsferItemTable.EnableControls;

        NewLine;
        NewLine;
        PrintLeft('Signed HQ ________________ ',0.250);
        NewLine;
        NewLine;
        PrintLeft('Received Branch ________________ ',0.250);
      end;
end;

procedure TStockTransferForm.ReporttrPrint(Sender: TObject);
begin
      Print(Reporttr.BaseReport);
end;

procedure TStockTransferForm.JvBitBtn11Click(Sender: TObject);
begin
      Reporttr.Execute;
end;

procedure TStockTransferForm.JvBitBtn12Click(Sender: TObject);
begin
      if DataForm2.User_db.FieldByName('Rights').asInteger > 2 then
      begin
        Application.CreateForm(TBarcodePrintingForm, BarcodePrintingForm);
        BarCodePrintingForm.Fromwhere := 'StockT';
        BarcodePrintingForm.showmodal;
      end
      else
        showmessage('You don''t have permission to go in here!');
end;

procedure TStockTransferForm.JvBitBtn13Click(Sender: TObject);
begin
       if Dataform2.StockTrnsferTableClosed.Value = 'False' then
       begin
         DataForm2.StockTable.DisableControls;
         DataForm2.StockTable.first;
         try
           while not DataForm2.StockTable.EOF do
           begin
             DataForm2.StocktrnsferItemTable.Insert;
             Dataform2.StocktrnsferItemTableLinkID.Value := DataForm2.StockTrnsferTableNr.Value;
             Dataform2.StocktrnsferItemTableStockNo.Value := Dataform2.StockTableNr.Value;
             Dataform2.StocktrnsferItemTableBeforeQty.Value := Dataform2.StockTableQty.Value;
             DataForm2.StocktrnsferItemTableQty.Value := 0;
             DataForm2.StocktrnsferItemTableDescription.Value := Dataform2.StockTableDescription.Value;
             Dataform2.StocktrnsferItemTableTCStockNo.Value := Dataform2.StockTableTCStockNo.Value;
             DataForm2.StocktrnsferItemTable.Post;
             Dataform2.StockTable.Next;
           end;
         finally
         end;
         DataForm2.StockTable.EnableControls;
         Dataform2.StocktrnsferItemTable.Refresh;
         Dataform2.StocktrnsferItemTable.First;
         DataForm2.StockTable.First;
         JvDBGrid3.SetFocus;
         JvDBGrid3.Col := 2;
       end
       else
         showmessage('Transfer already closed!');
end;

procedure TStockTransferForm.JvBitBtn14Click(Sender: TObject);
begin
     if MessageDlg('Are you sure you want to remove All Stock transfer Items?',
     mtConfirmation, [mbYes, mbNo], 0) = mrYes then
     begin
       if Dataform2.StockTrnsferTableClosed.Value = 'False' then
       begin
         DataForm2.Query2.Active := False;
         with DataForm2.Query2.SQL do begin
                Clear;
                Add('Delete FROM stocktrnsferitem_db');
                Add('WHERE LinkId = ' + inttostr(DataForm2.StockTrnsferTableNr.Value));
         end;
         DataForm2.Query2.ExecSQL;
         Dataform2.StocktrnsferItemTable.Requery();
         DataForm2.StockTable.First;
         JvDBGrid2.SetFocus;
       end
       else
         showmessage('Transfer already closed!');
     end;
end;

procedure TStockTransferForm.JvDBGrid2TitleBtnClick(Sender: TObject;
  ACol: Integer; Field: TField);
begin
      If ACol = 0 then
      begin
        If StockOrder = 'TCStockNo' then
          StockOrder := 'TCStockNo DESC'
        else
          StockOrder := 'TCStockNo';
      end;
      If ACol = 1 then
      begin
        If StockOrder = 'Description' then
          StockOrder := 'Description DESC'
        else
          StockOrder := 'Description';
      end;
      If ACol = 2 then
      begin
        If StockOrder = 'Barcode' then
          StockOrder := 'Barcode DESC'
        else
          StockOrder := 'Barcode';
      end;
      StockOpen;
end;

procedure TStockTransferForm.JvSpeedButton1Click(Sender: TObject);
begin
      Dataform2.StocktrnsferItemTable.Cancel;
end;

procedure TStockTransferForm.Button1Click(Sender: TObject);
begin
        If (DataForm2.StockTrnsferTableClosed.Value = 'False') then
        begin
          CloseTransfer;
        end
        else
          showmessage('Transfer already closed!');
end;

procedure TStockTransferForm.StockOpen();
var
   StockPlace: Integer;
begin
      If Dataform2.StockTable.Active = True then
        StockPlace := Dataform2.StockTableNr.Value
      else
        StockPlace := 0;
      Dataform2.StockTable.Close;
      with Dataform2.StockTable.SQL do
      begin
        Clear;
        Add('select * from stock_db');
        Add('where BranchNo is null');
        Add('order by ' + StockOrder);
      end;
      Dataform2.StockTable.Open;
      If StockPlace <> 0 then
        Dataform2.StockTable.Locate('Nr', InttoStr(StockPlace),[]);
end;

procedure TStockTransferForm.StockTrnsferOpen();
var
      OnlyOpenStr: String;
begin
      If Viewonlyopentransfers1.Checked = True then
        OnlyOpenStr := 'and Sync is null'
      else
        OnlyOpenStr := '';
      dataform2.StockTrnsferTable.Close;
      with Dataform2.StockTrnsferTable.SQL do
      begin
        Clear;
        Add('select * from stocktrnsfer_db');
        Add('where Branch_no = ' + InttoStr(DataForm2.BranchTableNr.Value));
        Add(OnlyOpenStr);
        Add('order by Date Desc');
      end;
      dataform2.StockTrnsferTable.Open;
end;

procedure TStockTransferForm.Viewonlyopentransfers1Click(Sender: TObject);
begin
       StockTrnsferOpen;
end;

procedure TInvoiceForm.WMSysCommand(var Message: TWMSysCommand);
begin
  if (Message.CmdType and $FFF0 = SC_MINIMIZE)
    then SendMessage(Application.Handle,
                     Message.Msg,
                     TMessage(Message).WParam,
                     TMessage(Message).WParam)
    else inherited;
end;

end.
