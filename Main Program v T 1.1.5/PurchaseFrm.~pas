unit PurchaseFrm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, DBGrids, JvExDBGrids, JvDBGrid, ComCtrls,
  JvExComCtrls, JvDateTimePicker, Mask, DBCtrls, Buttons, JvExButtons,
  JvBitBtn, Math, JvExControls, JvComponent, JvSpeedButton, JvDialogs,
  JvDBLookup, db, JvComponentBase, JvFormAutoSize, UtilsUnit, TCUtilsFrm,
  Menus;

type
  TPurchaseForm = class(TForm)
    PageControl1: TPageControl;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    DBText1: TDBText;
    Label2: TLabel;
    Label14: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label4: TLabel;
    Label3: TLabel;
    DBEdit1: TDBEdit;
    DBEdit10: TDBEdit;
    DBEdit4: TDBEdit;
    DBEdit5: TDBEdit;
    DBEdit6: TDBEdit;
    DBEdit8: TDBEdit;
    DBEdit9: TDBEdit;
    InvoiceDateEdit: TJvDateTimePicker;
    DBEdit3: TDBEdit;
    DBEdit2: TDBEdit;
    JvDBGrid1: TJvDBGrid;
    JvBitBtn1: TJvBitBtn;
    JvBitBtn6: TJvBitBtn;
    JvBitBtn8: TJvBitBtn;
    DBEdit7: TDBEdit;
    JvBitBtn9: TJvBitBtn;
    JvDBGrid2: TJvDBGrid;
    JvBitBtn2: TJvBitBtn;
    JvBitBtn3: TJvBitBtn;
    JvBitBtn4: TJvBitBtn;
    JvBitBtn5: TJvBitBtn;
    JvBitBtn7: TJvBitBtn;
    JvBitBtn11: TJvBitBtn;
    Label9: TLabel;
    DBEdit11: TDBEdit;
    JvSpeedButton1: TJvSpeedButton;
    TabSheet1: TTabSheet;
    Label10: TLabel;
    ExcelFileEdit: TEdit;
    Button1: TButton;
    ComboBox1: TComboBox;
    Button3: TButton;
    OpenExcel: TJvOpenDialog;
    JvDBGrid3: TJvDBGrid;
    JvBitBtn12: TJvBitBtn;
    GroupBox2: TGroupBox;
    JvBitBtn13: TJvBitBtn;
    JvDBLookupCombo1: TJvDBLookupCombo;
    Label11: TLabel;
    JvFormAutoSize1: TJvFormAutoSize;
    Label12: TLabel;
    DBEdit12: TDBEdit;
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    DeleteselectedPurchaseInv1: TMenuItem;
    GroupBox3: TGroupBox;
    Label13: TLabel;
    Import1: TMenuItem;
    Purchaseinvoicesfromturbocah1: TMenuItem;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    JvBitBtn14: TJvBitBtn;
    JvBitBtn15: TJvBitBtn;
    Label18: TLabel;
    DBText2: TDBText;
    JvBitBtn10: TJvBitBtn;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure JvBitBtn2Click(Sender: TObject);
    procedure InvoiceDateEditChange(Sender: TObject);
    procedure JvBitBtn3Click(Sender: TObject);
    procedure JvBitBtn4Click(Sender: TObject);
    procedure JvBitBtn8Click(Sender: TObject);
    procedure JvBitBtn6Click(Sender: TObject);
    procedure TabSheet2Exit(Sender: TObject);
    procedure JvDBGrid2MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure JvDBGrid2MouseWheelDown(Sender: TObject; Shift: TShiftState;
      MousePos: TPoint; var Handled: Boolean);
    procedure JvDBGrid2DblClick(Sender: TObject);
    procedure JvDBGrid2CellClick(Column: TColumn);
    procedure JvBitBtn5Click(Sender: TObject);
    procedure JvBitBtn9Click(Sender: TObject);
    procedure TabSheet3Show(Sender: TObject);
    procedure JvBitBtn7Click(Sender: TObject);
    procedure JvBitBtn11Click(Sender: TObject);
    procedure JvSpeedButton1Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure JvBitBtn12Click(Sender: TObject);
    procedure JvBitBtn13Click(Sender: TObject);
    procedure JvDBGrid3DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DeleteselectedPurchaseInv1Click(Sender: TObject);
    procedure JvDBGrid1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Purchaseinvoicesfromturbocah1Click(Sender: TObject);
    procedure TabSheet3Exit(Sender: TObject);
    procedure JvDBGrid1CellClick(Column: TColumn);
    procedure JvDBGrid1Exit(Sender: TObject);
    procedure JvBitBtn14Click(Sender: TObject);
    procedure JvBitBtn15Click(Sender: TObject);
    procedure JvBitBtn10Click(Sender: TObject);
  private
    procedure EndofShiftexec;
    procedure Showdates;
    procedure PurchaseDetailclose;
    procedure PurchaseDetailopen;
    procedure DoButtons;
    procedure WriteHQInvItem(StockLink, LinkID: String);
    procedure SavePurchaseItem;
    procedure CloseGRN;
    { Private declarations }
  public
    Totalstr: Currency;
    FromWhere: String;
    procedure ClosePurchaseInv;
    procedure CreateStock;
    procedure UpdateStock(Nr:Integer);
    procedure SaveInvoice;
    { Public declarations }
  protected
    procedure WMSysCommand(var Message: TWMSysCommand); message WM_SYSCOMMAND;
  end;

var
  PurchaseForm: TPurchaseForm;
  MyCurrentUser : Integer ;
  LastDocNo :string;
  LastDocID : Integer;
  InvLine:integer;
  Imperror: Boolean;

implementation

uses DataFrm2, AccountSearchFrm, StockSearchFrm, ImpData, ExtractFrm,
  InvoiceFrm, PeriodFrm, DataFrm, Listsmnu, UserFrm, TCDataMod, grnfrm;

{$R *.dfm}

procedure TPurchaseForm.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
        SavePurchaseItem;

        DataForm2.InvoiceTable.Filtered := False;
        DataForm2.InvoiceTable.Close;
        DataForm2.PurchaseItemTable.Close;
        dataForm2.StockTable.Close;
        Dataform2.BranchTable.Close;
        If FromWhere = 'GRN' then
          GrnForm.FreeOnRelease;
        PurchaseForm.FreeOnRelease;
end;

procedure TPurchaseForm.FormShow(Sender: TObject);
begin
        JvFormAutoSize1.Active := True;
        PurchaseForm.WindowState := wsMaximized;
        DoButtons;
        DataForm2.PurchaseItemTable.Open;
        Dataform2.StockTable.Close;
        with Dataform2.StockTable.SQL do
        begin
          Clear;
          Add('select * from stock_db');
          Add('where BranchNo is null');
        end;
        Dataform2.StockTable.Open;
        Dataform2.BranchTable.Open;

        Dataform2.InvoiceTable.Last;
        PageControl1.ActivePage := Tabsheet2;

        PurchaseForm.Width := Screen.Width;
        If not Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
        begin
          JvBitBtn5.Enabled := False;
        end;
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
        begin
          GroupBox2.Visible := False;
        end;
        ShowDates;
        PurchaseDetailclose;
end;

procedure TPurchaseForm.JvBitBtn2Click(Sender: TObject);
begin
        DataForm2.InvoiceTable.Insert;
        DataForm2.InvoiceTableClientName.Value := 'Creditor Name';
        DataForm2.InvoiceTable.FieldByName('InvDate').AsInteger := datetoIntDate(date);
        InvoiceDateEdit.Date := date;
        DataForm2.InvoiceTable.FieldByName('GLDebNo').asString := '';
        DataForm2.InvoiceTable.FieldByName('InvBy').asString := Dataform2.User_db.Fieldbyname('UserName').asString;
        Dataform2.InvoiceTableBranchNo.Value := DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0);
        DataForm2.InvoiceTableShiftSet.Value := '';
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
          DataForm2.InvoiceTable.FieldByName('InvClose').asString := 'RecqO'
        else
        begin
          DataForm2.InvoiceTable.FieldByName('InvClose').asString := 'PurcO';
          PurchaseDetailopen;
        end;
        SaveInvoice;
        DataForm2.InvoiceTable.Refresh;
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
          PageControl1.SelectNextPage(True)
        else
        begin
          DBEdit1.SetFocus;
          DBEdit1.SelectAll;
        end;
end;

procedure TPurchaseForm.InvoiceDateEditChange(Sender: TObject);
begin
        if (DatetoStr(InvoiceDateEdit.Date) <> IntDatetoString(DataForm2.InvoiceTable.FieldByName('InvDate').asInteger)) and (DatetoStr(InvoiceDateEdit.Date) <> '1899/12/30') then
        begin
          if (DataForm2.PurchaseItemTablestrState <> 'Edit') and (DataForm2.PurchaseItemTablestrState <> 'Insert') then
            DataForm2.InvoiceTable.Edit;
          DataForm2.InvoiceTable.FieldByName('InvDate').asInteger := DatetoIntDate(InvoiceDateEdit.Date);
        end;
end;

procedure TPurchaseForm.JvBitBtn3Click(Sender: TObject);
begin
        PurchaseDetailopen;
        GroupBox1.SetFocus;
end;

procedure TPurchaseForm.JvBitBtn4Click(Sender: TObject);
begin
        PurchaseDetailclose;
        SaveInvoice;
        ShowDates;
end;

procedure TPurchaseForm.JvBitBtn8Click(Sender: TObject);
begin
        SaveInvoice;
        SavePurchaseItem;
        PageControl1.ActivePage := TabSheet2;
end;

procedure TPurchaseForm.JvBitBtn6Click(Sender: TObject);
begin
        SaveInvoice;
        PageControl1.SelectNextPage(True);
end;

procedure TPurchaseForm.TabSheet2Exit(Sender: TObject);
begin
        SaveInvoice;
end;

procedure TPurchaseForm.JvDBGrid2MouseUp(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
        Showdates;
end;

procedure TPurchaseForm.JvDBGrid2MouseWheelDown(Sender: TObject;
  Shift: TShiftState; MousePos: TPoint; var Handled: Boolean);
begin
        Showdates;
end;

procedure TPurchaseForm.JvDBGrid2DblClick(Sender: TObject);
begin
      ShowDates;
end;

procedure TPurchaseForm.JvDBGrid2CellClick(Column: TColumn);
begin
      Showdates;
end;

procedure TPurchaseForm.JvBitBtn5Click(Sender: TObject);
begin
    if (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'PurcC') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> '') and
       (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqR') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqC') then
    begin
        with TCData.TurbocashDb.Params do
        begin
          clear;
          Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
        end;
        TCData.TurbocashDb.Open;
        TCData.tblAccount.Open;
        TCData.tblAccount.Filtered := False;
        TCData.tblAccount.Filter := 'WAccountTypeID=2';
        TCData.tblAccount.Filtered := True;
        Application.CreateForm(TAccountSearchForm, AccountSearchForm);
        AccountSearchForm.FromWhere := 'Purchases';
        AccountSearchForm.showmodal;
        TCData.tblAccount.Close;
        TCData.TurbocashDb.Close;
    end
    else
      showmessage('Create new Invoice First!');
end;

procedure TPurchaseForm.JvBitBtn9Click(Sender: TObject);
begin
    if (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'PurcC') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> '') and
       (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqR') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqC') then
    begin
      DataForm2.PurchaseItemTable.Append;
      JvDBGrid1.SetFocus;
      JvDBGrid1.Col := 1;
    end
    else
      showmessage('Create new Invoice First!');
end;

procedure TPurchaseForm.TabSheet3Show(Sender: TObject);
begin
      If (DataForm2.InvoiceTableInvClose.Value <> 'PurcC') and (DataForm2.InvoiceTableInvClose.Value <> '') and
         (DataForm2.InvoiceTableInvClose.Value <> 'RecqR') and (DataForm2.InvoiceTableInvClose.Value <> 'RecqC')
          and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'GRNC')then
        JvDBGrid1.ReadOnly := False
      else
        JvDBGrid1.ReadOnly := True;
end;

procedure TPurchaseForm.JvBitBtn7Click(Sender: TObject);
begin
    if (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'PurcC') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> '') and
       (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqR') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqC') then
    begin
      Application.CreateForm(TStockSearchForm, StockSearchForm);
      StockSearchform.FromWhereTmp := 'Purchases';
      StockSearchForm.ShowModal;
      StockSearchform.FreeOnRelease;
    end
    else
      showmessage('Create new Invoice First!');
end;

procedure TPurchaseForm.JvBitBtn11Click(Sender: TObject);
begin
//    if (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'PurcC') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> '') then
//    begin
      if MessageDlg('Are you sure you want to close this Purchase Invoice?',
      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        SaveInvoice;
        SavePurchaseItem;
        If FromWhere <> 'GRN' then
          ClosePurchaseInv
        else
          CloseGRN;
      end;
//    end
//    else
//      showmessage('Invoice already closed, you can''t close it again!');
end;

procedure TPurchaseForm.CreateStock();
begin
        Dataform2.StockTable.Append;
        DataForm2.StockTable.FieldByName('DateCreated').asInteger := DatetoIntDate(date);
        DataForm2.StockTable.FieldByName('DateChanged').asInteger := DatetoIntDate(date);
        If Dataform2.InvoiceTableInvClose.Value <> 'GRNO' then
          DataForm2.StockTable.FieldByName('Qty').AsFloat := DataForm2.PurchaseItemTableQty.Value
        else
          DataForm2.StockTable.FieldByName('Qty').AsFloat := Dataform2.PurchaseItemTablePrice2.Value;
        DataForm2.StockTable.FieldByName('AlertQty').AsFloat := 1;
        DataForm2.StockTable.FieldByName('CostPrice').AsFloat := DataForm2.PurchaseItemTableCostPrice.Value * 1.14;
        DataForm2.StockTable.FieldByName('SalesPrice').AsFloat := DataForm2.PurchaseItemTablePrice.Value;
        If Dataform2.InvoiceTableInvClose.Value <> 'GRNO' then
          DataForm2.StockTable.FieldByName('SalesPrice2').AsFloat := DataForm2.PurchaseItemTablePrice2.Value;
        DataForm2.StockTableBarcode.Value := DataForm2.PurchaseItemTableBarcode.Value;
        DataForm2.StockTableExtraDescr.Value := dataForm2.PurchaseItemTableExtraDescr.Value;
        Dataform2.StockTableModelNo.Value := dataform2.PurchaseItemTableModelNo.Value;
        Dataform2.StockTableStartingQty.Value := 0;
        Dataform2.StockTableDescription.Value := Dataform2.PurchaseItemTableDescription.Value;
        If DataForm2.PurchaseItemTableTCStockNo.Value <> '' then
          DataForm2.StockTable.FieldByName('TCStockNo').AsString := DataForm2.PurchaseItemTableTCStockNo.Value
        else
          DataForm2.StockTable.FieldByName('TCStockNo').AsString := '';
        DataForm2.StockTable.FieldByName('NonStockItem').AsString := 'False';
        DataForm2.StockTable.FieldByName('Changed').AsString := 'N';
        DataForm2.StockTable.Post;
        Dataform2.StockTable.Resync([rmExact]);
        Dataform2.PurchaseItemTable.Edit;
        Dataform2.PurchaseItemTableStockNo.Value := DataForm2.StockTableNr.Value;
        if DataForm2.StockTable.FieldByName('TCStockNo').AsString = '' then
        begin
          Dataform2.StockTable.Edit;
          Dataform2.StockTableTCStockNo.Value := copy(Dataform2.StockTableDescription.Value,1,2) + InttoStr(DataForm2.StockTableNr.Value);
          Dataform2.PurchaseItemTableTCStockNo.Value := DataForm2.StockTableTCStockNo.Value;
          Dataform2.StockTable.Post;
        end;
        SavePurchaseItem;
end;

procedure TPurchaseForm.EndofShiftexec();
{var
    PreviousTotalStr, s: String;
    i, i2: Integer;
    Total , TotalTax : Double ;      }
begin
//             Dataform2.TCStockTable.Open;
//             Dataform2.StockTable.Open;

//             Dataform2.InvoiceTable.Open;

//             If CreateUnpostedInvoice('P' + InttoStr(Dataform2.InvoiceTable.Fieldbyname('InvNo').asInteger), StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value))) = False then
//               showmessage('Purchase inv sending to TC Failed!');
    {
             Total := 0 ;
             TotalTax  := 0 ;

             If not DataForm2.tblUser.Locate('SUserName', Dataform2.InvoiceTable.Fieldbyname('InvBy').asString, []) then
             begin
               showmessage('TC User Not Found, Invoice skipped Inv No: ' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + ', ' + Dataform2.InvoiceTable.Fieldbyname('InvBy').asString + '!');
               Exit;
             end;
             If not Dataform2.tblAccount.Locate('SAccountCode', DataForm2.InvoiceTable.Fieldbyname('GLDebNo').asString, []) then
             begin
               showmessage('TC Account Not Found!, Invoice skipped Inv No: ' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + '!');
               Exit;
             end;
             If not DataForm2.tblGroups.Locate('SDescription', Dataform2.InvoiceTable.Fieldbyname('InvBy').asString, []) then
             begin
               showmessage('TC Sales Man Not Found!, Invoice skipped Inv No: ' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + '!');
               Exit;
             end;

             MyCurrentUser := DataForm2.tblUser.FieldbyName('WUserID').asInteger;
             LastDocNo := 'P' + InttoStr(Dataform2.InvoiceTable.Fieldbyname('InvNo').asInteger);
             DataForm2.tblDocHeader.Append;
             DataForm2.tblDocHeaderWUserID.Value := DataForm2.tblUser.FieldbyName('WUserID').asInteger;
             DataForm2.tblDocHeaderSDocNo.Value := LastDocNo;
             DataForm2.tblDocHeaderWTypeID.Value :=12;
             LastDocID:=DataForm2.tblDocHeaderWDocID.Value;
             DataForm2.tblDocHeaderWAccountID.Value := DataForm2.tblAccount.Fieldbyname('WAccountID').asInteger;
             DataForm2.tblDocHeaderWPaymentTypeID.Value := 0;
             DataForm2.tblDocHeaderWSourceTypeID.Value := 0;
             DataForm2.tblDocHeaderBPrinted.Value := False;
             DataForm2.tblDocHeaderBPosted.Value := False;
             DataForm2.tblDocHeaderBRepeating.Value := False;
             DataForm2.tblDocHeaderBExclusive.Value := True;
             DataForm2.tblDocHeaderWSalesManID.Value := DataForm2.tblGroups.FieldbyName('WGroupID').asInteger;
             DataForm2.tblDocHeaderWCurrencyID.Value := 0;
             DataForm2.tblDocHeaderWPostal1ID.Value := 0;
             DataForm2.tblDocHeaderWPostal2ID.Value := 0;
             DataForm2.tblDocHeaderWPostal3ID.Value := 0;
             DataForm2.tblDocHeaderWPostalCodeID.Value := 0;
             DataForm2.tblDocHeaderWDelAddress1ID.Value := 0;
             DataForm2.tblDocHeaderWDelAddress2ID.Value := 0;
             DataForm2.tblDocHeaderWDelAddress3ID.Value := 0;
             DataForm2.tblDocHeaderWDelCodeID.Value := 0;
             Dataform2.tblDocHeaderSReference.Value := Dataform2.InvoiceTableRefNo.Value;
             DataForm2.tblDocHeaderWMessage1ID.Value := 0;
             DataForm2.tblDocHeaderWMessage2ID.Value := 0;
             DataForm2.tblDocHeaderWMessage3ID.Value := 0;
  // Add Documents Infos

             DataForm2.tblDocHeaderDDate.Value := StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value));
             DataForm2.tblDocHeaderDAllocatedDate.Value := StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value));
             DataForm2.tblDocHeader.Post;

             Dataform2.PurchaseItemTable.Close;
             Dataform2.PurchaseItemTable.Open;
             InvLine:=1;
             DataForm2.PurchaseItemTable.First;
             while not DataForm2.PurchaseItemTable.EOF do
             begin
               if not Dataform2.StockTable.Locate('TCStockNo', DataForm2.PurchaseItemTable.FieldbyName('TCStockNo').asString,[]) then
               begin
                 showmessage('Can''t find local stock item');
               end;
               if not Dataform2.TCStockTable.Locate('SStockCode', Dataform2.PurchaseItemTable.FieldbyName('TCStockNo').asString,[]) then
               begin
                 showmessage('Can''t find TC stock item');
               end;
               DataForm2.tblDocLine.Append;
               DataForm2.tblDocLineWDocID.Value := LastDocID;
               DataForm2.tblDocLineWDocLineID.Value := InvLine;
               Inc(InvLine);
               DataForm2.tblDocLineWStockID.Value := Dataform2.TCStockTable.FieldByName('WStockID').asInteger;
               DataForm2.tblDocLineWLineTypeID.Value := 90; // Stock Item
               Dataform2.tblMessage.Append;
               Dataform2.tblMessageSDescription.Value := Dataform2.PurchaseItemTableDescription.Value;
               Dataform2.tblMessage.Post;
               DataForm2.tblDocLineWDescriptionID.Value := Dataform2.tblMessageWMessageID.Value;
               DataForm2.tblDocLineFQtyOrdered.Value := DataForm2.PurchaseItemTable.FieldbyName('Qty').asFloat;
               DataForm2.tblDocLineFQtyShipped.Value := DataForm2.PurchaseItemTable.FieldbyName('Qty').asFloat;
               DataForm2.tblDocLineFSellingPrice.Value := MyRoundTo(DataForm2.PurchaseItemTable.FieldbyName('CostPrice').asFloat, -2);
               DataForm2.tblDocLineFItemDiscount.Value := DataForm2.PurchaseItemTable.FieldbyName('Discount').asFloat;
               DataForm2.tblDocLineWtaxID.Value:= DataForm2.IniFile.ReadInteger('TCSetup', 'TCInputTaxId', 0);
               DataForm2.tblDocLineFInclusiveAmt.Value := MyRoundTo((DataForm2.PurchaseItemTable.FieldbyName('CostPrice').asFloat * 1.14) * DataForm2.PurchaseItemTable.FieldbyName('Qty').asFloat,-2);
               DataForm2.tblDocLineFExclusiveAmt.Value := MyRoundTo(DataForm2.PurchaseItemTable.FieldbyName('CostPrice').asFloat * DataForm2.PurchaseItemTable.FieldbyName('Qty').asFloat, -2);
               Total := Total + DataForm2.tblDocLineFInclusiveAmt.Value ;
               TotalTax  := TotalTax + (DataForm2.tblDocLineFInclusiveAmt.Value - DataForm2.tblDocLineFExclusiveAmt.Value);
               DataForm2.tblDocLineFTaxAmount.Value := DataForm2.tblDocLineFInclusiveAmt.Value - DataForm2.tblDocLineFExclusiveAmt.Value;
               DataForm2.tblDocLine.Post;
               DataForm2.PurchaseItemTable.Next;
             end;
             DataForm2.tblDocHeader.edit ;
             DataForm2.tblDocHeaderFDocAmount.AsFloat :=  Total ;
             DataForm2.tblDocHeaderFTaxAmount.AsFloat :=  TotalTax ;
             DataForm2.tblDocHeaderdSysdate.asdatetime := now ;
             DataForm2.tblDocHeader.post ;

             Dataform2.InvoiceTable.Edit;
             DataForm2.InvoiceTableShiftSet.Value := LastDocNo;
             DataForm2.InvoiceTable.Post;
     }
end;

procedure TPurchaseForm.JvSpeedButton1Click(Sender: TObject);
begin
            Dataform2.PurchaseItemTable.Cancel;
end;

procedure TPurchaseForm.Button1Click(Sender: TObject);
begin
      If OpenExcel.Execute then
      begin
        ExcelFileEdit.Text := OpenExcel.InitialDir + OpenExcel.FileName;
        ImportData.ExcelFileConnect.Connected := False;
        Imperror := False;
        If ExtractFileExt(ExcelFileEdit.Text) = '.xls' then
        begin
          ImportData.ExcelFileConnect.ConnectionString := 'Provider=Microsoft.Jet.OLEDB.4.0; Data Source=' + ExcelFileEdit.Text + ';Extended Properties="Excel 8.0;HDR=YES"';
          try
            ImportData.ExcelFileConnect.Open;
            ImportData.ExcelFileConnect.GetTableNames(ComboBox1.Items,True);
          except
            ShowMessage('Unable to connect to Excel, make sure the workbook ' + ExcelFileEdit.Text + ' exist!');
            raise;
          end;
          Combobox1.Enabled := True;
          Button3.Enabled := True;
        end;
        If ExtractFileExt(ExcelFileEdit.Text) = '.csv' then
        begin
          ImportData.ExcelFileConnect.ConnectionString := 'Provider=Microsoft.Jet.OLEDB.4.0; Data Source=' + ExtractFilePath(ExcelFileEdit.Text) + ';Extended Properties="text;HDR=YES;FMT=Delimited"';
          try
            ImportData.ExcelFileConnect.Open;
  //          DataFrm.ExcelFileConnect.GetTableNames(ComboBox1.Items,True);
          except
            ShowMessage('Unable to connect to csv, make sure the workbook ' + ExcelFileEdit.Text + ' exist!');
            raise;
          end;
          ImportData.ADOQuery1.SQL.Clear;
          ImportData.ADOQuery1.SQL.Add('select * from [' + ExtractFileName(ExcelFileEdit.Text) + ']');
          ImportData.AdoQuery1.Active := True;
          Combobox1.Enabled := False;
          Button3.Enabled := False;
        end;
      end;
end;

procedure TPurchaseForm.Button3Click(Sender: TObject);
var
      s: String;
      i, i2: Integer;
begin
      If ExtractFileExt(ExcelFileEdit.Text) = '.xls' then
      begin
        s := 'select * from [' + Combobox1.Text + ']';
        i2 := 1;
        for i := 0 to 255 do
        begin
          if copy(s,i,1) = '''' then
          begin
            Delete(s,i,1);
          end;
        end;
        ImportData.ADOQuery1.SQL.Clear;
        ImportData.ADOQuery1.SQL.Add(s);
        ImportData.AdoQuery1.Active := True;
      end;
      If ExtractFileExt(ExcelFileEdit.Text) = '.csv' then
      begin
        s := 'select * from [' + ExtractFileName(ExcelFileEdit.Text) + ']';
        ImportData.ADOQuery1.SQL.Clear;
        ImportData.ADOQuery1.SQL.Add(s);
        ImportData.AdoQuery1.Active := True;
      end;
   //   DataFrm.ADOQuery1.Fieldbyname('ID').SetFieldType(ftInteger);
end;

procedure TPurchaseForm.JvBitBtn12Click(Sender: TObject);
begin
    if (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'PurcC') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> '') and
       (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqR') and (DataForm2.InvoiceTable.FieldByName('InvClose').asString <> 'RecqC') then
    begin
      ImportData.ADOQuery1.DisableControls;
      ImportData.ADOQuery1.first;
      try
        while not ImportData.ADOQuery1.EOF do
        begin
          if (ImportData.ADOQuery1.Fieldbyname('Description').AsString <> '') then
          begin
            Dataform2.PurchaseItemTable.Insert;
            Dataform2.PurchaseItemTableLinkId.Value := Dataform2.InvoiceTableNr.Value;
            Dataform2.PurchaseItemTableDescription.Value := ImportData.ADOQuery1.Fieldbyname('Description').AsString;
            If ImportData.ADOQuery1.FieldByName('Price 1 Incl').asString <> '' then
              Dataform2.PurchaseItemTablePrice.Value := ImportData.ADOQuery1.Fieldbyname('Price 1 Incl').AsFloat
            else
              Dataform2.PurchaseItemTablePrice.Value := 0;
            If ImportData.ADOQuery1.FieldByName('Price 2 Incl').asString <> '' then
              Dataform2.PurchaseItemTablePrice2.Value := ImportData.ADOQuery1.Fieldbyname('Price 2 Incl').AsFloat
            else
              Dataform2.PurchaseItemTablePrice2.Value := 0;
            If ImportData.ADOQuery1.FieldByName('Cost Excl').asString <> '' then
              Dataform2.PurchaseItemTableCostPrice.Value := ImportData.ADOQuery1.Fieldbyname('Cost Excl').AsFloat
            else
              Dataform2.PurchaseItemTableCostPrice.Value := 0;
            Dataform2.PurchaseItemTableModelNo.Value := ImportData.ADOQuery1.Fieldbyname('Model No').AsString;
            Dataform2.PurchaseItemTableQty.Value := ImportData.ADOQuery1.Fieldbyname('Qty').AsFloat;
            Dataform2.PurchaseItemTableExtraDescr.Value := ImportData.ADOQuery1.Fieldbyname('ExtraDescr').AsString;

            if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) and (ImportData.ADOQuery1.Fieldbyname('Tc Stock No').AsString <> '') then
            begin
              DataForm2.Query2.Close;
              with DataForm2.Query2.SQL do begin
                Clear;
                Add('Select Nr from stock_db');
                Add('where TCStockNo = ''' + ImportData.ADOQuery1.Fieldbyname('Tc Stock No').AsString + '''');
              end;
              Dataform2.Query2.Open;
              If Dataform2.Query2.RecordCount > 0 then
                Dataform2.PurchaseItemTableStockNo.Value := Dataform2.Query2.FieldbyName('Nr').AsInteger
              else
                Dataform2.PurchaseItemTableStockNo.Value := 0;
            end
            else
            begin
              If ImportData.ADOQuery1.Fieldbyname('Stock No').AsString <> '' then
              begin
                DataForm2.Query2.Close;
                with DataForm2.Query2.SQL do begin
                  Clear;
                  Add('Select Nr from stock_db');
                  Add('where Nr = ''' + ImportData.ADOQuery1.Fieldbyname('Stock No').AsString + '''');
                end;
                Dataform2.Query2.Open;
                If Dataform2.Query2.RecordCount > 0 then
                  Dataform2.PurchaseItemTableStockNo.Value := Dataform2.Query2.FieldbyName('Nr').AsInteger
                else
                  Dataform2.PurchaseItemTableStockNo.Value := 0;
              end
              else
                Dataform2.PurchaseItemTableStockNo.Value := 0;
            end;

            Dataform2.PurchaseItemTableTCStockNo.Value := ImportData.ADOQuery1.Fieldbyname('Tc Stock No').AsString;
            Dataform2.PurchaseItemTableBarcode.Value := ImportData.ADOQuery1.Fieldbyname('Barcode').AsString;
            SavePurchaseItem;
          end;
          ImportData.ADOQuery1.Next;
        end;
      finally
      end;
      ImportData.ADOQuery1.EnableControls;
      ImportData.ADOQuery1.Close;
      ImportData.ExcelFileConnect.Close;
      PageControl1.ActivePage := TabSheet3;
    end
    else
      showmessage('Create new Invoice First!');
end;

procedure TPurchaseForm.JvBitBtn13Click(Sender: TObject);
begin
    if MessageDlg('Are you sure you want to Create a Branch stock transfer for ' + Dataform2.BranchTableName.Value + '!',
    mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
      If Dataform2.InvoiceTableInvClose.Value = 'PurcC' then
      begin
        dataform2.StockTrnsferTable.Close;
        with Dataform2.StockTrnsferTable.SQL do
        begin
          Clear;
          Add('select * from stocktrnsfer_db');
        end;
        dataform2.StockTrnsferTable.Open;
        DataForm2.StockTrnsferTable.Insert;
        DataForm2.StockTrnsferTableBranch_no.Value := DataForm2.BranchTableNr.Value;
        DataForm2.StockTrnsferTableDate.Value := DatetoIntDate(date);
        Dataform2.StockTrnsferTable.Post;
        DataForm2.StocktrnsferItemTable.Open;
        Dataform2.PurchaseItemTable.DisableControls;
        Dataform2.PurchaseItemTable.first;
        try
          while not Dataform2.PurchaseItemTable.EOF do
          begin
            DataForm2.StocktrnsferItemTable.Insert;
            Dataform2.StocktrnsferItemTableLinkID.Value := DataForm2.StockTrnsferTableNr.Value;
            Dataform2.StocktrnsferItemTableStockNo.Value := Dataform2.PurchaseItemTableStockNo.Value;
            Dataform2.StocktrnsferItemTableBeforeQty.Value := Dataform2.PurchaseItemTableQty.Value;
            DataForm2.StocktrnsferItemTableQty.Value := Dataform2.PurchaseItemTableQty.Value;
            DataForm2.StocktrnsferItemTableDescription.Value := Dataform2.PurchaseItemTableDescription.Value;
            Dataform2.StocktrnsferItemTableTCStockNo.Value := Dataform2.PurchaseItemTableTCStockNo.Value;
            DataForm2.StocktrnsferItemTable.Post;
            Dataform2.PurchaseItemTable.Next;
          end;
        finally
        end;
        Dataform2.PurchaseItemTable.EnableControls;
        DataForm2.StocktrnsferItemTable.Close;
        Dataform2.StockTrnsferTable.Close;
      end
      else
      begin
        showmessage('Close Purchase Inv first!');
      end;
    end;
end;

procedure TPurchaseForm.UpdateStock(Nr:Integer);
var
  Changed: Boolean;
begin
        If Dataform2.StockTable.Locate('Nr',Nr,[]) then
        begin
          Changed := False;
          If Floattostrf(Dataform2.StockTableCostPrice.Value,ffFixed,17,2) <> Floattostrf(Dataform2.PurchaseItemTableCostPrice.Value,ffFixed,17,2) then
          begin
            Changed := True;
            Dataform2.StockTable.Edit;
            Dataform2.StockTableCostPrice.Value := Dataform2.PurchaseItemTableCostPrice.Value;
          end;
          If Floattostrf(Dataform2.StockTableSalesPrice.Value,ffFixed,17,2) <> Floattostrf(Dataform2.PurchaseItemTablePrice.Value,ffFixed,17,2) then
          begin
            Changed := True;
            Dataform2.StockTable.Edit;
            Dataform2.StockTableSalesPrice.Value := Dataform2.PurchaseItemTablePrice.Value;
          end;
          If Dataform2.InvoiceTableInvClose.Value <> 'GRNO' then
          begin
            If Floattostrf(Dataform2.StockTableSalesPrice2.Value,ffFixed,17,2) <> Floattostrf(Dataform2.PurchaseItemTablePrice2.Value,ffFixed,17,2) then
            begin
              Changed := True;
              Dataform2.StockTable.Edit;
              Dataform2.StockTableSalesPrice2.Value := Dataform2.PurchaseItemTablePrice2.Value;
            end;
          end;
          If (Dataform2.StockTableDescription.Value <> Dataform2.PurchaseItemTableDescription.Value) and (Dataform2.PurchaseItemTableDescription.Value <> '') then
          begin
            Changed := True;
            Dataform2.StockTable.Edit;
            Dataform2.StockTableDescription.Value := Dataform2.PurchaseItemTableDescription.Value;
          end;
          If (Dataform2.StockTableExtraDescr.Value <> Dataform2.PurchaseItemTableExtraDescr.Value) and (Dataform2.PurchaseItemTableExtraDescr.Value <> '') then
          begin
            Changed := True;
            Dataform2.StockTable.Edit;
            Dataform2.StockTableExtraDescr.Value := Dataform2.PurchaseItemTableExtraDescr.Value;
          end;
          If Dataform2.InvoiceTableInvClose.Value <> 'GRNO' then
          begin
            If Dataform2.PurchaseItemTableQty.Value <> 0 then
            begin
              Changed := True;
              Dataform2.StockTable.Edit;
              Dataform2.StockTableQty.Value := Dataform2.StockTableQty.Value + Dataform2.PurchaseItemTableQty.Value;
            end;
          end
          else
          begin
            If (Dataform2.PurchaseItemTableQty.Value + (Dataform2.PurchaseItemTablePrice2.Value - Dataform2.PurchaseItemTableQty.Value)) <> 0 then
            begin
              Changed := True;
              Dataform2.StockTable.Edit;
              Dataform2.StockTableQty.Value := Dataform2.StockTableQty.Value + Dataform2.PurchaseItemTablePrice2.Value;
            end;
          end;
          If Changed = True then
            Dataform2.StockTable.Post;
          If Dataform2.PurchaseItemTableStockNo.Value = 0 then
          begin
            Dataform2.PurchaseItemTable.Edit;
            Dataform2.PurchaseItemTableStockNo.Value := Dataform2.StockTableNr.Value;
            SavePurchaseItem;
          end;
        end
        else
          showmessage('Something went wrong with stock update!');
end;

procedure TPurchaseForm.JvDBGrid3DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn;
  State: TGridDrawState);
begin
        if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) and (ImportData.ADOQuery1.Fieldbyname('Tc Stock No').AsString <> '') then
        begin
          DataForm2.Query2.Close;
          with DataForm2.Query2.SQL do begin
            Clear;
            Add('Select Nr from stock_db');
            Add('where TCStockNo = ''' + ImportData.ADOQuery1.Fieldbyname('Tc Stock No').AsString + '''');
          end;
          Dataform2.Query2.Open;
          If (Dataform2.Query2.RecordCount = 0) then
          begin
            JvDBGrid3.Canvas.Font.Color := clGreen;
            Imperror := True;
          end;
        end
        else
        begin
          DataForm2.Query2.Close;
          with DataForm2.Query2.SQL do begin
            Clear;
            Add('Select Nr from stock_db');
            Add('where Nr = ''' + ImportData.ADOQuery1.Fieldbyname('Stock No').AsString + '''');
          end;
          Dataform2.Query2.Open;
          If Dataform2.Query2.RecordCount = 0 then
          begin
            JvDBGrid3.Canvas.Font.Color := clGreen;
            Imperror := True;
          end;
        end;

     // Default drawing.
        JvDBGrid3.DefaultDrawDataCell(Rect, Column.Field,State);
end;

procedure TPurchaseForm.ClosePurchaseInv();
var
  i : Integer ;
  TryAgain : Boolean ;
begin
        If Dataform2.InvoiceTableInvNo.Value = 0 then
        begin
          Dataform2.InvoiceTable.Edit;
          DataForm2.Query2.Close;
          with DataForm2.Query2.SQL do begin
            Clear;
            Add('SELECT MAX(InvNo) FROM invoice_db');
            Add('where InvClose = "PurcC" or InvClose = "PurcO"');
          end;
          DataForm2.Query2.Open;
          Dataform2.GlobalTable.Refresh;
          Dataform2.GlobalTable.Edit;
          If DataForm2.GlobalTablePurchaseInvNo.Value < DataForm2.Query2.FieldByName('MAX(InvNo)').asInteger then
            DataForm2.GlobalTablePurchaseInvNo.Value := DataForm2.Query2.FieldByName('MAX(InvNo)').asInteger;
          Dataform2.InvoiceTable.FieldByName('InvNo').asInteger := DataForm2.GlobalTablePurchaseInvNo.Value + 1;
          DataForm2.GlobalTablePurchaseInvNo.Value := Dataform2.InvoiceTable.FieldByName('InvNo').asInteger;
          Dataform2.GlobalTable.Post;
          Dataform2.Query2.Close;
        end;
//          Dataform2.InvoiceTableInvNo.Value := DataForm2.IniFile.ReadInteger('Invoice', 'PurchaseInvNo', 0) + 1;
//          DataForm2.IniFile.WriteInteger('Invoice', 'PurchaseInvNo', DataForm2.InvoiceTable.Fieldbyname('InvNo').asInteger);
        SaveInvoice;
        If Dataform2.InvoiceTableInvClose.Value = 'PurcO' then
        begin
          DataForm2.PurchaseItemTable.First;
          while not DataForm2.PurchaseItemTable.EOF do
          begin
            Dataform2.Query4.Close;
            with Dataform2.Query4.SQL do
            begin
              Clear;
              Add('select TCStockNo, Nr from stock_db');
              Add('where TCStockNo = "' + Dataform2.PurchaseItemTableTCStockNo.Value + '"');
              Add('and BranchNo is null');
            end;
            Dataform2.Query4.Open;
            If DataForm2.Query4.RecordCount = 0 then
//              if (not Dataform2.StockTable.Locate('TCStockNo;BranchNo', VarArrayOf([DataForm2.PurchaseItemTable.FieldbyName('TCStockNo').asString,0]), [])) or (Dataform2.PurchaseItemTableTCStockNo.Value = '') then
            begin
              PurchaseForm.CreateStock;
//                   ExtractForm.Memo1.Lines.Add('"' + InttoStr(Dataform2.InvoiceTableBranchNo.Value) + '/' + InttoStr(DataForm2.InvoiceTable.FieldbyName('InvNo').asInteger) + '","Can''t find stock item!, Invoice skipped: Stock Descr ' + Dataform2.PurchaseItemTableDescription.Value + '","' + Dataform2.InvoiceTable.Fieldbyname('InvBy').asString + '"');
  //                 Fault := True;
            end
            else
            begin
              PurchaseForm.UpdateStock(Dataform2.Query4.FieldByName('Nr').asInteger);
            end;
            Application.ProcessMessages;
            DataForm2.PurchaseItemTable.Next;
          end;
        end;
        Dataform2.InvoiceTable.Edit;
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') = '0' then
          Dataform2.InvoiceTableInvClose.Value := 'PurcC'
        else
          Dataform2.InvoiceTableInvClose.Value := 'RecqC';

        Dataform2.InvoiceTableInvTotal.Value := TotalStr;
        SaveInvoice;
//        end;
        Dataform2.Query4.Close;
        if (Dataform2.InvoiceTableShiftSet.Value = '') and (Dataform2.InvoiceTableInvClose.Value = 'PurcC') then
        begin
          if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
          begin
            if MessageDlg('Do you want to send the Purchase inv into Turbocash now?',
            mtConfirmation, [mbYes, mbNo], 0) = mrYes then
            begin
              If DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '') <> '' then
                ShortDateFormat := DataForm2.IniFile.ReadString('TCSetup', 'TCDateFormat', '');
              with TCData.TurbocashDb.Params do
              begin
                clear;
                Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
              end;
              TCData.TurbocashDb.Open;
              TryAgain := true ;
              i := 0 ;
              While TryAgain do
              begin
                try
                TryAgain := false ;
                TCData.TCTax.Open;
                if not TCData.TCTax.Locate('WAccountID', Inttostr(DataForm2.IniFile.ReadInteger('TCSetup', 'TCInputTaxId', 0)),[]) then
                begin
                  showmessage('TC Tax ID nor found run stopped?');
                  TCData.TCTax.Close;
                  Exit;
                end;
                TCData.TCTax.Close;
                TCData.tblAccount.Open;
                TCData.tblAccount.Filtered := False;
                TCData.tblAccount.Filter := 'WAccountTypeID=2';
                TCData.tblAccount.Filtered := True;
                TCData.TCStockTable.Open;
                TCData.creditordetail.Open;
                TCData.TCTotal.Open;
                TCData.tblDocHeader.Open;
                TCData.tblDocLine.Open;
                TCData.tblUser.Open;
                TCData.tblGroups.Open;
                TCData.tblMessage.Open;
                except
                  inc(i);
                  if i < 5 then
                  begin
                    TryAgain := true;
                    TCData.TCStockTable.Close;
                    TCData.tblAccount.Close;
                    TCData.tblAccount.Filtered := False;
                    TCData.creditordetail.Close;
                    TCData.TCTotal.Close;
                    TCData.TCQuery.Close;
                    TCData.tblDocHeader.Close;
                    TCData.tblDocLine.Close;
                    TCData.tblUser.Close;
                    TCData.tblMessage.Close;
                    TCData.tblGroups.Close;
                  end
                  else
                  begin
                    TCData.TurbocashDb.Close;
                    showmessage('Table were in use go out of Turbocash');
                    exit;
                  end;
//                    raise;
                  sleep(100);
                end;
              end;

              ExtractForm.Memo1.Clear;
              ExtractForm.Memo1.Lines.Add('"Inv No","Description"');

              If (Dataform2.InvoiceTableGLDebNo.Value = '') then
              begin
                CreateTCCreditor();
              end
              else
              begin
                TCData.TCQuery.Close;
                with TCData.TCQuery.SQL do
                begin
                  Clear;
                  Add('select SAccountCode from Account.DB');
                  Add('where SAccountCode = "' + DataForm2.InvoiceTable.Fieldbyname('GLDebNo').asString + '"');
                end;
                TCData.TCQuery.Open;
                If TCData.TCQuery.RecordCount = 0 then
                  CreateTCCreditor();
              end;

{
        DataForm2.PurchaseItemTable.first;
        try
          while not DataForm2.PurchaseItemTable.EOF do
          begin
            If DataForm2.PurchaseItemTableStockNo.Value = 0 then
            begin
              If Dataform2.PurchaseItemTableTCStockNo.Value <> '' then
              begin
                Dataform2.Query2.Close;
                with DataForm2.Query2.SQL do
                begin
                  Clear;
                  Add('Select Nr from stock_db');
                  Add('where TCStockNo = "' + DataForm2.PurchaseItemTableTCStockNo.Value + '"');
                  Add('and Branchno is null');
                end;
                Dataform2.Query2.Open;
                If Dataform2.Query2.RecordCount <> 0 then
                begin
                  Dataform2.StockTable.Locate('Nr',Dataform2.Query2.FieldByName('Nr').asInteger,[]);
                  UpdateStock;
                  if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
                  begin
                    Dataform2.TCQuery.Close;
                    with DataForm2.TCQuery.SQL do begin
                      Clear;
                      Add('Select SStockCode from Stock.DB');
                      Add('where SStockCode = ''' + Dataform2.PurchaseItemTableTCStockNo.Value + '''');
                    end;
                    Dataform2.TCQuery.Open;
                    If Dataform2.TCQuery.RecordCount = 0 then
                      CreateTCStock()
                    else
                      UpdateTCStock;
                  end;
                end
                else
                begin
                  CreateStock();
                  if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
                    CreateTCStock();
                end;
                Dataform2.Query2.Close;
              end
              else
              begin
                CreateStock();
                if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
                  CreateTCStock();
              end;
            end
            else
            begin
              UpdateStock;
              if (Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''))) then
              begin
                Dataform2.TCQuery.Close;
                with DataForm2.TCQuery.SQL do begin
                  Clear;
                  Add('Select SStockCode from Stock.DB');
                  Add('where SStockCode = ''' + Dataform2.PurchaseItemTableTCStockNo.Value + '''');
                end;
                Dataform2.TCQuery.Open;
                If Dataform2.TCQuery.RecordCount = 0 then
                  CreateTCStock()
                else
                  UpdateTCStock;
              end;
            end;
            DataForm2.PurchaseItemTable.Next;
          end;
        finally
        end;   }
              If CreateUnpostedPurcInvoice('P' + InttoStr(Dataform2.InvoiceTable.Fieldbyname('BranchNo').asInteger) + InttoStr(Dataform2.InvoiceTable.Fieldbyname('InvNo').asInteger), StrtoDate(IntDatetoString(Dataform2.InvoiceTableInvDate.Value))) = False then
              begin
                showmessage('Purchase inv sending to TC Failed, save the error log!');
                If ExtractForm.SaveDialog.Execute then
                begin
                  ExtractForm.Memo1.Lines.SaveToFile(Extractform.SaveDialog.FileName);
                end;
              end;

//          EndofShiftexec();
              TCData.TCStockTable.Close;
              TCData.tblAccount.Close;
              TCData.tblAccount.Filtered := False;
              TCData.creditordetail.Close;
              TCData.TCTotal.Close;
              TCData.TCQuery.Close;
              TCData.tblDocHeader.Close;
              TCData.tblDocLine.Close;
              TCData.tblUser.Close;
              TCData.tblMessage.Close;
              TCData.tblGroups.Close;
              TCData.TurbocashDb.Close;
              ShortDateFormat := 'yyyy/MM/dd';
              Extractform.Memo1.Clear;
            end;
          end;
        end
        else
        begin
          if (Dataform2.InvoiceTableInvClose.Value = 'PurcC') then
            Showmessage('Invoice already send into Turbcash!');
        end;
end;

procedure TPurchaseForm.Showdates();
begin
        If (DataForm2.InvoiceTable.FieldByName('InvDate').asInteger <> 0) and (not DataForm2.InvoiceTable.FieldByName('InvDate').IsNull) then
          InvoiceDateEdit.Date := StrtoDate(IntDatetoString(DataForm2.InvoiceTable.FieldByName('InvDate').asInteger))
        else
          InvoiceDateEdit.Date := InvoiceDateEdit.NullDate;

//        Dataform2.Query3.Close;
//        with DataForm2.Query3.SQL do begin
//          Clear;
//          Add('SELECT SUM(CostPrice * Qty) as Total FROM invoiceitem_db');
//          Add('where LinkId = ' + inttostr(Dataform2.InvoiceTable.Fieldbyname('Nr').asInteger));
//        end;
//        Dataform2.Query3.Open;
        Dataform2.Query3.Close;
        with DataForm2.Query3.SQL do begin
          Clear;
          Add('SELECT SUM(Round(CostPrice * Qty,2) - if(Discount is null or Discount = 0.00,0,(Round(CostPrice * Qty,2) * (Discount / 100)))) as Total FROM invoiceitem_db');
          Add('where LinkId = ' + inttostr(Dataform2.InvoiceTable.Fieldbyname('Nr').asInteger));
        end;
        Dataform2.Query3.Open;
        If DataForm2.Query3.Fieldbyname('Total').IsNull then
          TotalStr := 0.00
        else
          TotalStr := DataForm2.Query3.Fieldbyname('Total').Value;
        Label13.Caption := Floattostrf(TotalStr,ffCurrency,17,2);
        Label15.Caption := Floattostrf(Totalstr * 1.14,ffCurrency,17,2);
        Dataform2.Query3.Close;
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
        begin
          If Dataform2.InvoiceTableInvClose.Value = 'RecqO' then
            Purchaseform.Caption := 'Stock Requisition Status (Open Requisition order)'
          else
          begin
            If (Dataform2.InvoiceTableInvClose.Value = 'RecqC') and (Dataform2.InvoiceTableSyncHQ.Value = 0) then
              Purchaseform.Caption := 'Stock Requisition Status (Closed Requisition order not send to hq.)'
            else
            begin
              If (Dataform2.InvoiceTableInvClose.Value = 'RecqC') and (Dataform2.InvoiceTableSyncHQ.Value <> 0) then
                Purchaseform.Caption := 'Stock Requisition Status (Closed Requisition order was send to hq.)'
              else
                Purchaseform.Caption := 'Stock Requisition Status (HQ Accepted Requisition)';
            end;
          end;
        end
        else
        begin
          If (Dataform2.InvoiceTableInvClose.Value = 'PurcO') then
            Purchaseform.Caption := 'Purchase Inv Status (Purchase inv Open)'
          else
          begin
            If (Dataform2.InvoiceTableInvClose.Value = 'PurcC') then
              Purchaseform.Caption := 'Purchase Inv Status (Purchase inv Closed)'
            else
            begin
              If (Dataform2.InvoiceTableInvClose.Value = 'RecqC') then
                Purchaseform.Caption := 'Stock Requisition Status (Purchase Inv not Created)'
              else
                Purchaseform.Caption := 'Stock Requisition Status (Purchase Inv Created)'
            end;
          end;
        end;
end;

procedure TPurchaseForm.DeleteselectedPurchaseInv1Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) or (DataForm2.InvoiceTableInvClose.Value = 'PurcO') then
      begin
        if MessageDlg('Are you sure you want to Delete the Selected Purchase Invoice?',
        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
          InvoiceForm.DeleteInvoiceItems;
          DataForm2.InvoiceTable.Edit;
          DataForm2.InvoiceTable.Delete;
          Showdates;
        end;
      end
      else
        showmessage('You don''t have permission to go in here!');
end;

procedure TPurchaseForm.JvDBGrid1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
      if HiWord(GetKeyState(vk_delete)) <> 0 then
      begin
        If (Dataform2.InvoiceTableInvClose.Value <> 'PurcC') then
        begin
          if MessageDlg('Are you sure you want to delete line ' + DataForm2.PurchaseItemTable.Fieldbyname('Description').asString, mtConfirmation,
          [mbYes, mbNo], 0) = mrYes then
          begin
            DataForm2.PurchaseItemTable.Edit;
            DataForm2.PurchaseItemTable.Delete;
          end;
        end
        else
          showmessage('You can''t delete an item on an closed Purchase Invoice!');
      end;
end;

procedure TPurchaseForm.PurchaseDetailclose();
begin
        DBEdit1.ReadOnly := True;
        DBEdit2.ReadOnly := True;
        DBEdit3.ReadOnly := True;
        DBEdit4.ReadOnly := True;
        DBEdit5.ReadOnly := True;
        DBEdit6.ReadOnly := True;
        DBEdit7.ReadOnly := True;
        DBEdit8.ReadOnly := True;
        DBEdit9.ReadOnly := True;
        DBEdit10.ReadOnly := True;
        DBEdit11.ReadOnly := True;
        DBEdit12.ReadOnly := True;
        JvBitBtn5.Enabled := False;
        InvoiceDateEdit.enabled := false;
end;

procedure TPurchaseForm.PurchaseDetailopen();
begin
        DBEdit1.ReadOnly := False;
        DBEdit2.ReadOnly := False;
        DBEdit4.ReadOnly := False;
        DBEdit5.ReadOnly := False;
        DBEdit6.ReadOnly := False;
        DBEdit7.ReadOnly := False;
        DBEdit8.ReadOnly := False;
        DBEdit9.ReadOnly := False;
        DBEdit10.ReadOnly := False;
        DBEdit11.ReadOnly := False;
        DBEdit12.ReadOnly := False;
        If Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
          JvBitBtn5.Enabled := true;
        InvoiceDateEdit.enabled := true;
end;

procedure TPurchaseForm.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
      if (DataForm2.InvoiceTablestrState = 'Edit') or (DataForm2.InvoiceTablestrState = 'Insert') then
      begin
        if MessageDlg('Do you want to exit without saving?',
        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
          DataForm2.InvoiceTable.Cancel;
        end
        else
          CanClose := False;
      end;
end;

procedure TPurchaseForm.Purchaseinvoicesfromturbocah1Click(
  Sender: TObject);
var
      invnostr: Integer;
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) or (DataForm2.InvoiceTableInvClose.Value = 'PurcO') then
      begin
        Application.CreateForm(TPeriodForm, PeriodForm);
        with TCData.TurbocashDb.Params do
        begin
          clear;
          Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
        end;
        TCData.TurbocashDb.Open;
        TCData.TCPeriod.Open;
        TCData.tblUser.Open;
        TCData.tblDocHeader.Open;
        TCData.tblAccount.Open;
        TCData.tblMessage.Open;
        TCData.TCStockTable.Open;
        TCData.creditordetail.Open;
        PeriodForm.showmodal;
        if MessageDlg('Are you sure you want to Import Turbocash purchase invoices for period ' + InttoStr(TCData.TCPeriodWPeriodID.Value) + '?',
        mtConfirmation, [mbYes, mbNo], 0) = mrYes then
        begin
          TCData.TCQuery.Close;
          with TCData.TCQuery.SQL do
          begin
            Clear;
            Add('select SDocNo, DDate from DocHead.DB');
//            Add('where DDate > ' + DateTimetoStr(DataForm2.TCPeriodDStartDate.Value) + ' and DDate < ' + DateTimetoStr(Dataform2.TCPeriodDEndDate.Value));
            Add('where WTypeId = 12');
          end;
          TCData.TCQuery.Open;
          TCData.TCQuery.DisableControls;
          TCData.TCQuery.first;
          try
            while not TCData.TCQuery.Eof do
            begin
              if (DatetoIntDate(TCData.TCQuery.FieldByName('DDate').AsDateTime) < DatetoIntDate(TCData.TCPeriodDStartDate.Value)) or (DatetoIntDate(TCData.TCQuery.FieldByName('DDate').AsDateTime) > DatetoIntDate(TCData.TCPeriodDEndDate.Value)) then
              begin
                TCData.TCQuery.Next;
                Continue;
              end;
              if not TCData.tblDocHeader.Locate('SDocNo', TCData.TCQuery.FieldbyName('SDocNo').asString, []) then
              begin
                showmessage('Something went wrong with import, inv ' + TCData.TCQuery.FieldByName('SDocNo').asString + ' were skipped');
                TCData.TCQuery.Next;
                Continue;
              end;
              Dataform2.InvoiceTable.Insert;
              Dataform2.InvoiceTableInvDate.Value := DatetoIntDate(TCData.tblDocHeaderDDate.Value);
              TCData.tblUser.Locate('WUserID', TCData.tblDocHeaderWUserID.Value, []);
              Dataform2.InvoiceTableInvBy.Value := TCData.tblUserSUserName.Value;
              Dataform2.InvoiceTableInvNo.Value := strtoInt(copy(TCData.tblDocHeaderSDocNo.Value,3,6));
              Dataform2.InvoiceTableInvClose.Value := 'PurcC';
              TCData.tblAccount.Locate('WAccountID', TCData.tblDocHeaderWAccountID.Value, []);
              Dataform2.InvoiceTableGLDebNo.Value := TCData.tblAccountSAccountCode.Value;
              Dataform2.InvoiceTableBranchNo.Value := 0;
              Dataform2.InvoiceTableRefNo.Value := TCData.tblDocHeaderSReference.Value;
              TCData.creditordetail.Locate('WAccountID', TCData.tblDocHeaderWAccountID.Value,[]);
              Dataform2.InvoiceTableClientName.Value := TCData.tblAccountSDescription.Value;
              Dataform2.InvoiceTableClientTelW.Value := TCData.creditordetailSTelephone1.Value;
              Dataform2.InvoiceTableClientTelC.Value := TCData.creditordetailSTelephone2.Value;
              Dataform2.InvoiceTableClientAdr1.Value := TCData.creditordetailSPostal1.Value;
              Dataform2.InvoiceTableClientAdr2.Value := TCData.creditordetailSPostal2.Value;
              Dataform2.InvoiceTableClientAdr3.Value := TCData.creditordetailSPostal3.Value;
              Dataform2.InvoiceTableClientPCode.Value := TCData.creditordetailSPostalCode.Value;
              Dataform2.InvoiceTableClientVatNo.Value := TCData.creditordetailSReference.Value;
              Dataform2.InvoiceTableClientEMail.Value := TCData.creditordetailSEmail.Value;
              Dataform2.InvoiceTableShiftSet.Value := TCData.tblDocHeaderSDocNo.Value;
              SaveInvoice;
              Dataform2.InvoiceTable.Refresh;
              TCData.TCQuery2.Close;
              with TCData.TCQuery2.SQL do
              begin
                clear;
                Add('select * from DocLine.DB');
                Add('where WDocID = ' + InttoStr(TCData.tblDocHeaderWDocID.Value));
              end;
              TCData.TCQuery2.Open;
              TCData.TCQuery2.DisableControls;
              TCData.TCQuery2.first;
              try
                while not TCData.TCQuery2.Eof do
                begin
                  Dataform2.PurchaseItemTable.Insert;
                  TCData.tblMessage.Locate('WMessageID',TCData.TCQuery2.FieldByName('WdescriptionID').AsInteger,[]);
                  Dataform2.PurchaseItemTableDescription.Value := TCData.tblMessageSDescription.Value;
                  TCData.TCStockTable.Locate('WStockID',TCData.TCQuery2.FieldByName('WStockID').asInteger,[]);
                  Dataform2.PurchaseItemTablePrice.Value := MyRoundTo(TCData.TCStockTableFSellingPrice1.Value * 1.14, -2);
                  Dataform2.PurchaseItemTablePrice2.Value := MyRoundTo(TCData.TCStockTableFSellingPrice2.Value * 1.14, -2);
                  Dataform2.PurchaseItemTableQty.Value := MyRoundTo(TCData.TCQuery2.FieldByName('FQtyShipped').asFloat, -2);
                  Dataform2.PurchaseItemTableLinkId.Value := Dataform2.InvoiceTableNr.Value;
                  Dataform2.PurchaseItemTableCostPrice.Value := MyRoundTo(TCData.TCQuery2.FieldbyName('FSellingPrice').asFloat, -2);
                  Dataform2.PurchaseItemTableBarcode.Value := TCData.TCStockTableSBarCodeNumber.Value;
                  Dataform2.PurchaseItemTableTCStockNo.Value := TCData.TCStockTableSStockCode.Value;
                  Dataform2.PurchaseItemTableExtraDescr.Value := TCData.TCStockTableSExtraDesc.Value;
                  Dataform2.PurchaseItemTableDiscount.Value := TCData.TCQuery2.FieldByName('FItemDiscount').AsFloat;
                  SavePurchaseItem;
                    TCData.TCQuery2.Next;
                end;
              finally
              end;
              TCData.TCQuery2.EnableControls;

              TCData.TCQuery.Next;
            end;
          finally
          end;
        end;
        TCData.TCQuery.EnableControls;
        TCData.TCPeriod.Close;
        TCData.tblUser.Close;
        TCData.tblDocHeader.Close;
        TCData.tblAccount.Close;
        TCData.tblMessage.Close;
        TCData.TCStockTable.Close;
        TCData.creditordetail.Close;
        TCData.TurbocashDb.Close;
        Periodform.freeonrelease;
      end;
end;

procedure TPurchaseForm.TabSheet3Exit(Sender: TObject);
begin
       SavePurchaseItem;
end;

procedure TPurchaseForm.JvDBGrid1CellClick(Column: TColumn);
begin
      ShowDates;
end;

procedure TPurchaseForm.JvDBGrid1Exit(Sender: TObject);
begin
      SavePurchaseItem;
      ShowDates;
end;

procedure TPurchaseForm.JvBitBtn14Click(Sender: TObject);
var
  StockLink, InvNoLink: String;
  ContinueFault: String;
begin
  if not (Dataform2.InvoiceTableSyncHQ.IsNull) and (Dataform2.InvoiceTableInvClose.Value = 'RecqC') then
  begin
    if (DataForm2.User_db.FieldByName('Rights').asInteger > 2) then
    begin
      if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
      begin
        if MessageDlg('Are you sure you want to send Invoices, ARE YOUR INTERNET CONNECTION ACTIVE!', mtConfirmation,
        [mbYes, mbNo], 0) = mrYes then
        begin
          ContinueFault := 'True';
          Userform.JvSpeedButton13.Click;
          If UserForm.PingReturn < 5 then
          begin
            if MessageDlg('You have a very slow connection do you want to continue?', mtConfirmation,
               [mbYes, mbNo], 0) = mrNo then
              ContinueFault := 'False';
          end;
          If ContinueFault <> 'False' then
          begin
            DataForm.Connection.ConnectionString := 'Driver={mySQL ODBC 3.51 Driver};Server=' + DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') + ';""Port=3306;Option=4;Database=' + DataForm2.IniFile.ReadString('Login', 'DataBase', '') + ';Uid=' + DataForm2.IniFile.ReadString('Login', 'UserName', '') + ';Pwd=' + Decrypt(DataForm2.IniFile.ReadString('Login', 'Password', '')) + ';"';
            try
              DataForm.Connection.Open;
            except
            begin
              ShowMessage('Could not make a connection try again later!');
              DataForm.Connection.Close;
            end;
            raise;
            end;
            Dataform.Connection.BeginTrans;
            try
              ListsMenu.WriteHQInv;
              DataForm.Query3.Close;
              with DataForm.Query3.SQL do begin
                Clear;
                Add('select Nr');
                Add('from invoice_db');
                Add('where InvNo = ' + Inttostr(DataForm2.InvoiceTableInvNo.Value));
                Add('and BranchNo = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
              end;
              DataForm.Query3.Open;
              InvNoLink := InttoStr(Dataform.Query3.fieldbyname('Nr').asInteger);
              DataForm2.PurchaseItemTable.DisableControls;
              DataForm2.PurchaseItemTable.First;
              while not DataForm2.PurchaseItemTable.EOF do
              begin
                If Dataform2.PurchaseItemTableStockNo.Value <> 0 then
                begin
                  ListsMenu.TestHQStockandCreate(Dataform2.PurchaseItemTableTCStockNo.Value);
                  StockLink := InttoStr(Dataform.Query3.Fieldbyname('Nr').asInteger)
                end
                else
                  StockLink := '0';
                WriteHQInvItem(StockLink, InvNoLink);
                DataForm2.PurchaseItemTable.Next;
              end;
              Dataform2.PurchaseItemTable.EnableControls;
              Dataform.Connection.CommitTrans;
            finally
              if DataForm.Connection.InTransaction then
              begin
                Dataform.Connection.RollbackTrans;
                showmessage('Sending Failed please try again later or call support');
              end
              else
              begin
                Dataform2.InvoiceTable.Edit;
                DataForm2.InvoiceTableSyncHQ.Value := DatetoIntDate(date);
                SaveInvoice;
                showmessage('Finished sending Stock Request!');
              end;
            end;
            DataForm.Connection.Close;
            Showdates;
          end;
        end;
      end
      else
        showmessage('Add Branch Detail in setup!');
    end
    else
      showMessage('You don''t have permision to go in here!');
  end
  else
    showmessage('Requisition not closed yet or Requisition already send to HQ!');
end;

procedure TPurchaseForm.JvBitBtn15Click(Sender: TObject);
begin
      if MessageDlg('Are you sure you want to Convert the stock requisition to a purchase inv!', mtConfirmation,
      [mbYes, mbNo], 0) = mrYes then
      begin
        If Dataform2.InvoiceTableInvClose.Value <> 'RecqR' then
        begin
          with Dataform2.Query1.SQL do
          begin
            Clear;
            Add('insert into invoice_db (ClientName, InvDate, InvBy, InvClose, BranchNo, GLDebNo, InvNo)');
            Add('Values ("' + Dataform2.InvoiceTableClientName.Value + '",' + InttoStr(Dataform2.InvoiceTableInvDate.Value) + ',"' + Dataform2.User_dbUserName.Value + '","PurcO",' + InttoStr(DataForm2.InvoiceTableBranchNo.Value) + ',"' + Dataform2.InvoiceTableGLDebNo.Value + '",' + InttoStr(Dataform2.InvoiceTableInvNo.Value) + ')');
          end;
          Dataform2.Query1.ExecSQL;
          with Dataform2.Query1.SQL do
          begin
            Clear;
            Add('select Nr from invoice_db');
            Add('where InvNo = ' + InttoStr(Dataform2.InvoiceTableInvNo.Value));
            Add('and BranchNo = ' + InttoStr(Dataform2.InvoiceTableBranchNo.Value));
            Add('and InvClose = "PurcO"');
          end;
          Dataform2.Query1.Open;
          If Dataform2.Query1.RecordCount <> 0 then
          begin
            DataForm2.PurchaseItemTable.DisableControls;
            DataForm2.PurchaseItemTable.First;
            while not DataForm2.PurchaseItemTable.EOF do
            begin
              Dataform2.Query2.Close;
              with Dataform2.Query2.SQL do
              begin
                Clear;
                Add('insert into invoiceitem_db (Description, CostPrice, Price, Price2, Qty, ExtraDescr, StockNo, TCStockNo, Barcode, ModelNo, LinkID, Discount)');
                Add('Values ("' + Dataform2.PurchaseItemTableDescription.Value + '",' + FloattoStr(Dataform2.PurchaseItemTableCostPrice.Value) + ',' + FloattoStr(Dataform2.PurchaseItemTablePrice.Value) + ',' + FloattoStr(Dataform2.PurchaseItemTablePrice2.Value) + ',' + FloattoStr(DataForm2.PurchaseItemTableQty.Value) + ',"' + Dataform2.PurchaseItemTableExtraDescr.Value + '",' + InttoStr(Dataform2.PurchaseItemTableStockNo.Value) + ',"' + Dataform2.PurchaseItemTableTCStockNo.Value + '","' + Dataform2.PurchaseItemTableBarcode.Value + '","' + Dataform2.PurchaseItemTableModelNo.Value +'",' + InttoStr(Dataform2.Query1.Fieldbyname('Nr').asInteger) + ',' + FloattoStr(Dataform2.PurchaseItemTableDiscount.Value) + ')');
              end;
              Dataform2.Query2.ExecSQL;

              DataForm2.PurchaseItemTable.Next;
            end;
            Dataform2.PurchaseItemTable.EnableControls;
            DataForm2.InvoiceTable.Edit;
            Dataform2.InvoiceTableInvClose.Value := 'RecqR';
            SaveInvoice;
            Dataform2.InvoiceTable.Requery;
            Dataform2.PurchaseItemTable.Close;
            Showdates();
            FromWhere := '';
            DoButtons;
            Dataform2.InvoiceTable.Locate('Nr', Dataform2.Query1.Fieldbyname('Nr').asInteger,[]);
            Dataform2.PurchaseItemTable.Open;
            DataForm2.Query1.Close;
          end;
        end
        else
          showmessage('Requisition already transfered to Purchase Invoice!');
      end;
end;

procedure TPurchaseForm.DoButtons();
begin
        if (DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0') or (FromWhere = 'hqrecq') then
        begin
          If (FromWhere <> 'GRN') then
          begin
            Dataform2.InvoiceTable.Close;
            with Dataform2.InvoiceTable.SQL do
            begin
              Clear;
              Add('select * from invoice_db');
              Add('where (InvClose=''RecqO'' or InvClose=''RecqC'' or InvClose=''RecqR'')');
            end;
            DataForm2.InvoiceTable.Open;
            Purchaseform.Caption := 'Stock Requisition';
            GroupBox2.Visible := False;
            JvBitBtn4.Caption := 'Save Stock Recq Changes';
            JvBitBtn4.Enabled := False;
            JvBitBtn3.Caption := 'Edit Stock Recq';
            JvBitBtn3.Enabled := False;
            JvBitBtn2.Caption := 'Create Stock Recq';
            TabSheet2.Caption := 'Stock Requisition Details';
            Tabsheet1.TabVisible := False;
            JvBitBtn5.Visible := False;
            JvBitBtn10.Visible := False;
            DBEdit10.Enabled := False;
            JvDBGrid1.ReadOnly := False;
            JvDBGrid1.Columns.Items[6].Visible := True;
            If FromWhere = 'hqrecq' then
            begin
              JvBitBtn11.Visible := False;
              JvBitBtn2.Enabled := False;
              JvBitBtn15.Visible := True;
            end
            else
            begin
              JvBitBtn11.Caption := 'Process Stock Recq';
              JvBitBtn15.Visible := False;
            end;
          end
          else
          begin
            Dataform2.InvoiceTable.Close;
            with Dataform2.InvoiceTable.SQL do
            begin
              Clear;
              Add('select * from invoice_db');
              Add('where (InvClose="GRNO" or InvClose="GRNC")');
            end;
            DataForm2.InvoiceTable.Open;
            JvBitBtn4.Caption := 'Save GRN';
            JvBitBtn4.Enabled := False;
            JvBitBtn3.Caption := 'Edit GRN';
            JvBitBtn3.Enabled := False;
            JvBitBtn2.Visible := False;
            JvBitBtn11.Caption := 'Close GRN';
            JvBitBtn15.Visible := False;
            JvBitBtn5.Visible := False;
            DBEdit10.Enabled := False;
            JvDBGrid1.ReadOnly := True;
            TabSheet2.Caption := 'GRN Details';
            Tabsheet1.TabVisible := False;
            Application.CreateForm(TGrnForm, GrnForm);
            JvDBGrid1.Columns.Items[6].Visible := False;
          end;
        end
        else
        begin
          Dataform2.InvoiceTable.Close;
          with Dataform2.InvoiceTable.SQL do
          begin
            Clear;
            Add('select * from invoice_db');
            Add('where (InvClose=''PurcO'' or InvClose=''PurcC'')');
          end;
          DataForm2.InvoiceTable.Open;
          TabSheet2.Caption := 'Purchase Inv Details';
          Tabsheet1.TabVisible := True;
          JvBitBtn11.Caption := 'Close Purchase Inv';
          JvBitBtn4.Caption := 'Save Pruchase Inv Changes';
          JvBitBtn14.Visible := False;
          JvBitBtn15.Visible := False;
          JvBitBtn10.Visible := False;
          JvBitBtn5.Visible := True;
          DBEdit10.Enabled := True;
          JvDBGrid1.ReadOnly := False;
          JvDBGrid1.Columns.Items[6].Visible := True;
        end;
end;

procedure TPurchaseForm.WriteHQInvItem(StockLink, LinkID: String);
begin
            DataForm.Query1.Close;
            with DataForm.Query1.SQL do begin
              Clear;
              Add('insert into invoiceitem_db (Description, CostPrice, Price, Price2, Qty, ExtraDescr, StockNo, TCStockNo, Barcode, ModelNo, LinkID, Discount) Values');
              Add('("' + Dataform2.PurchaseItemTableDescription.Value + '",' + FloattoStr(Dataform2.PurchaseItemTableCostPrice.Value) + ',' + FloattoStr(DataForm2.PurchaseItemTablePrice.Value) + ',' + FloattoStr(DataForm2.PurchaseItemTablePrice2.Value) + ',' + FloattoStr(Dataform2.PurchaseItemTableQty.Value) + ',"' + DataForm2.PurchaseItemTableExtraDescr.Value + '",' + StockLink + ',"' + DataForm2.PurchaseItemTableTCStockNo.Value + '","' + Dataform2.PurchaseItemTableBarcode.Value + '","' + Dataform2.PurchaseItemTableModelNo.Value + '",' + LinkID + ',' + FloattoStr(Dataform2.PurchaseItemTableDiscount.Value) + ')');
            end;
            DataForm.Query1.ExecSQL;
end;

procedure TPurchaseForm.WMSysCommand(var Message: TWMSysCommand);
begin
  if (Message.CmdType and $FFF0 = SC_MINIMIZE)
    then SendMessage(Application.Handle,
                     Message.Msg,
                     TMessage(Message).WParam,
                     TMessage(Message).WParam)
    else inherited;
end;

procedure TPurchaseForm.SavePurchaseItem();
var
    InsertStr: Boolean;
begin
      if (DataForm2.PurchaseItemTablestrState = 'Edit') or (DataForm2.PurchaseItemTablestrState = 'Insert') then
      begin
        try
          DataForm2.PurchaseItemTable.Post;
        except
          on E : Exception do
            showmessage(E.Message);
        end;
        DataForm2.PurchaseItemTable.Refresh;
      end;
end;

procedure TPurchaseForm.SaveInvoice();
var
    InsertStr: Boolean;
begin
        if (DataForm2.InvoiceTablestrState = 'Edit') or (DataForm2.InvoiceTablestrState = 'Insert') then
        begin
          if (DataForm2.InvoiceTablestrState = 'Insert') then
            InsertStr := True
          else
            InsertStr := False;
          try
            DataForm2.InvoiceTable.Post;
          except
            on E : Exception do
              showmessage(E.Message);
          end;
          If InsertStr = True then
            DataForm2.InvoiceTable.Refresh
          else
            Dataform2.InvoiceTable.Resync([rmExact]);
        end;
end;

procedure TPurchaseForm.CloseGRN();
var
    f, f2: extended;
begin
        If Dataform2.InvoiceTableInvClose.Value = 'GRNO' then
        begin
          DataForm2.PurchaseItemTable.DisableControls;
          DataForm2.PurchaseItemTable.First;
          Dataform2.Connection.BeginTrans;
          try
            while not DataForm2.PurchaseItemTable.EOF do
            begin
{              f := Dataform2.PurchaseItemTablePrice2.Value;
              f2 := DataForm2.PurchaseItemTableQty.Value;
              If (f - f2) <> 0 then
              begin
                Dataform2.PurchaseItemTable.Edit;
                DataForm2.PurchaseItemTableQty.Value := DataForm2.PurchaseItemTableQty.Value + (f - f2);
                try
                  Dataform2.PurchaseItemTable.Post;
                except
                  on E : Exception do
                    showmessage(E.Message);
                end;
              end;   }
            Dataform2.Query4.Close;
            with Dataform2.Query4.SQL do
            begin
              Clear;
              Add('select TCStockNo, Nr from stock_db');
              Add('where TCStockNo = "' + Dataform2.PurchaseItemTableTCStockNo.Value + '"');
              Add('and BranchNo is null');
            end;
            Dataform2.Query4.Open;
            If DataForm2.Query4.RecordCount = 0 then
              PurchaseForm.CreateStock
            else
              PurchaseForm.UpdateStock(Dataform2.Query4.FieldByName('Nr').asInteger);
            Application.ProcessMessages;
            DataForm2.PurchaseItemTable.Next;
          end;
          Dataform2.Connection.CommitTrans;
          finally
            if DataForm2.Connection.InTransaction then
            begin
              Dataform2.Connection.RollbackTrans;
              showmessage('GRN did not close, contact support!');
            end
            else
            begin
              Dataform2.InvoiceTable.Edit;
              DataForm2.InvoiceTableInvClose.Value := 'GRNC';
              try
                DataForm2.InvoiceTable.Post;
              except
                on E : Exception do
                  showmessage(E.Message);
              end;
            end;
          end;
          Dataform2.PurchaseItemTable.EnableControls;
          Dataform2.Query4.Close;
        end
        else
          showmessage('GRN already closed!');
end;

procedure TPurchaseForm.JvBitBtn10Click(Sender: TObject);
begin
        If Dataform2.InvoiceTableInvClose.Value = 'GRNO' then
        begin
          GRNForm.showmodal;
        end
        else
          showmessage('GRN already closed!');
end;

end.
