unit Listsmnu;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Buttons, JvThreadDialog, JvComponent, JvThread, JvComponentBase,
  Menus, Math, JvExButtons, JvBitBtn, Grids, DBGrids, JvExDBGrids, JvDBGrid,
  JvBaseDlg, JvProgressDialog, db, UtilsUnit, ADODB;

type
  TListsMenu = class(TForm)
    BitBtn1: TBitBtn;
    JvBitBtn1: TJvBitBtn;
    JvBitBtn2: TJvBitBtn;
    JvBitBtn4: TJvBitBtn;
    JvBitBtn5: TJvBitBtn;
    JvBitBtn6: TJvBitBtn;
    JvBitBtn7: TJvBitBtn;
    JvBitBtn8: TJvBitBtn;
    JvProgressDialog1: TJvProgressDialog;
    MainMenu1: TMainMenu;
    ExtraRuns1: TMenuItem;
    estWhichInvoicesdidntgotoHQ1: TMenuItem;
    CompareStocktoHQ1: TMenuItem;
    MarkallasnotsendtoTurbocash1: TMenuItem;
    RemoveallopenInvoices: TMenuItem;
    MarkallBranchtransfersasnottransfered1: TMenuItem;
    MarkPurchasesasnotsendtoTurbocash1: TMenuItem;
    MarkLayBuytransactionsasnotsendtoTurbocash1: TMenuItem;
    SpecialLayBuyFix1: TMenuItem;
    OneTimeFixes1: TMenuItem;
    SpecialPurchFix1: TMenuItem;
    JvBitBtn3: TJvBitBtn;
    RemoveallopenPurchaseInvoices1: TMenuItem;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure JvBitBtn4Click(Sender: TObject);
    procedure JvBitBtn5Click(Sender: TObject);
    procedure JvBitBtn6Click(Sender: TObject);
    procedure JvBitBtn7Click(Sender: TObject);
    procedure estWhichInvoicesdidntgotoHQ1Click(Sender: TObject);
    procedure CompareStocktoHQ1Click(Sender: TObject);
    procedure MarkallasnotsendtoTurbocash1Click(Sender: TObject);
    procedure MarkallBranchtransfersasnottransfered1Click(Sender: TObject);
    procedure MarkPurchasesasnotsendtoTurbocash1Click(Sender: TObject);
    procedure MarkLayBuytransactionsasnotsendtoTurbocash1Click(
      Sender: TObject);
    procedure SpecialLayBuyFix1Click(Sender: TObject);
    procedure SpecialPurchFix1Click(Sender: TObject);
    procedure JvBitBtn1Click(Sender: TObject);
    procedure JvBitBtn8Click(Sender: TObject);
    procedure JvBitBtn2Click(Sender: TObject);
    procedure JvBitBtn3Click(Sender: TObject);
    procedure RemoveallopenInvoicesClick(Sender: TObject);
    procedure RemoveallopenPurchaseInvoices1Click(Sender: TObject);
  private
    function FindTransferedStock(TCStockNoStr,StockNoStr: String): Extended;
    function FindInvoiceStock(TCStockNoStr, StockNoStr: String): Extended;
    procedure TestforHQInvReturning;
    procedure WriteLocalInv;
    procedure TestLocalStockandCreate;
    procedure UpdatetoHQGRN;
    { Private declarations }
  public
    procedure TestHQStockandCreate(TCStockNoStr: String);
    procedure WriteHQInv;
    { Public declarations }
  end;

var
  ListsMenu: TListsMenu;
  s: String;

implementation

uses DataFrm2, ExtractFrm, InvoiceListsFrm, StockListFrm,
  CashUpFrm, CashupListFrm, StockFrm, DataFrm, StockReportsFrm, UserFrm,
  TCDataMod;

{$R *.DFM}

procedure TListsMenu.FormClose(Sender: TObject; var Action: TCloseAction);
begin
      ListsMenu.FreeOnRelease;
end;

procedure TListsMenu.FormShow(Sender: TObject);
begin
      If not Directoryexists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
      begin
        JvBitBtn7.Enabled := False;
//        Button6.Enabled := False;
      end;
      if DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') = '' then
      begin
        JvBitBtn1.Enabled := False;
        JvBitBtn8.Enabled := False;
//        Button6.Enabled := False;
      end;
end;

procedure TListsMenu.JvBitBtn4Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
      begin
         Application.CreateForm(TInvoiceListsForm, InvoiceListsForm);
         InvoiceListsForm.showmodal;
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.JvBitBtn5Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 2) then
      begin
        Application.CreateForm(TCashUpForm, CashUpForm);
        CashUpForm.showmodal;
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.JvBitBtn6Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
      begin
         Application.CreateForm(TCashupListForm, CashupListForm);
         CashupListForm.showmodal;
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.JvBitBtn7Click(Sender: TObject);
var
//    TotalSelled, TotalAdded: Extended;
    i, i2, i3, Progi: Integer;
begin
    if (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
    begin
      if (DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '') <> '') then
      begin
        if DirectoryExists(DataForm2.IniFile.ReadString('TCSetup', 'TCPath', '')) then
        begin
          try
            with TCData.TurbocashDb.Params do
            begin
              clear;
              Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
            end;
            TCData.TurbocashDb.Connected := True;
            TCData.TCStockInstall.Open;
            Dataform2.StockTable.Close;
            with Dataform2.StockTable.SQL do
            begin
              Clear;
              Add('select * from stock_db');
              Add('where BranchNo is null');
            end;
            Dataform2.StockTable.Open;

            JvProgressDialog1.Caption := 'Syncing TC Stock';
            JvProgressDialog1.Show;
            JvProgressDialog1.Max := TCData.TCStockInstall.RecordCount;
            Progi := 0;
            JvProgressDialog1.Position := 0;

            TCData.TCStockInstall.DisableControls;
            try
              TCData.TCStockInstall.First;
              while not TCData.TCStockInstall.EOF do
              begin
                Dataform2.Query4.Close;
                with Dataform2.Query4.SQL do
                begin
                  Clear;
                  Add('select TCStockNo from stock_db');
                  Add('where TCStockNo = "' + TCData.TCStockInstall.Fieldbyname('SStockCode').asString + '"');
                  Add('and BranchNo is null');
                end;
                Dataform2.Query4.Open;
                If Dataform2.Query4.RecordCount > 1 then
                begin
                  Dataform2.Query4.Close;
                  with Dataform2.Query4.SQL do
                  begin
                    Clear;
                    Add('delete from stock_db');
                    Add('where TCStockNo = "' + TCData.TCStockInstall.Fieldbyname('SStockCode').asString + '"');
                    Add('and BranchNo is null');
                  end;
                  Dataform2.Query4.ExecSQL;
                  Dataform2.StockTable.Close;
                  Dataform2.StockTable.Open;
                end;
                Dataform2.Query4.Close;

                if not Dataform2.StockTable.Locate('TCStockNo', TCData.TCStockInstall.Fieldbyname('SStockCode').asString,[]) then
                begin
//                  showmessage('1');
                  Dataform2.StockTable.Insert;
                  DataForm2.StockTable.FieldByName('DateCreated').asInteger := DatetoIntDate(date);
                  DataForm2.StockTable.FieldByName('DateChanged').asInteger := DatetoIntDate(date);
                  DataForm2.StockTable.FieldByName('Qty').asFloat := MyRoundTo(TCData.TCStockInstall.Fieldbyname('FQtyOnHand').asFloat, -2);
//                  DataForm2.StockTable.FieldByName('Qty').Assign(Dataform2.TCStockInstall.Fieldbyname('FQtyOnHand'));
                  DataForm2.StockTable.FieldByName('AlertQty').asFloat := MyRoundTo(TCData.TCStockInstall.Fieldbyname('FReorderQty').asFloat, -2);
                  DataForm2.StockTable.FieldByName('CostPrice').asFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FUnitCost').asFloat * 1.14,ffFixed,17,2));
                  //MyRoundTo(Dataform2.TCStockTable.Fieldbyname('FUnitCost').asFloat, -2) * 1.14;
                  DataForm2.StockTable.FieldByName('SalesPrice').asFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice1').asFloat * 1.14,ffFixed,17,2));
                  DataForm2.StockTable.FieldByName('SalesPrice2').asFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice2').asFloat * 1.14,ffFixed,17,2));
                  //MyRoundTo(Dataform2.TCStockTable.Fieldbyname('FSellingPrice1').asFloat, -2) * 1.14;
                  DataForm2.StockTable.FieldByName('StartingQty').asFloat := MyRoundTo(TCData.TCStockInstall.Fieldbyname('FQtyOnHand').asFloat, -2);
                  DataForm2.StockTable.FieldByName('TCStockNo').Assign(TCData.TCStockInstall.Fieldbyname('SStockCode'));
                  DataForm2.StockTable.FieldByName('Barcode').Assign(TCData.TCStockInstall.Fieldbyname('SBarCodeNumber'));
                  DataForm2.StockTable.FieldByName('Description').Assign(TCData.TCStockInstall.Fieldbyname('SDescription'));
                  i2 := 0;
                  i3 := 0;
                  for i := 0 to DataForm2.StockTable.FieldByName('Description').DataSize do
                  begin
                    If copy(DataForm2.StockTable.FieldByName('Description').AsString,i,1) = '(' then
                    begin
                      i2 := i;
                    end;
                    If (copy(DataForm2.StockTable.FieldByName('Description').AsString,i,1) = ')') and (i2 <> 0) then
                    begin
                      i3 := i;
                    end;
                  end;
                  If (i2 <> 0) and (i3 <> 0) then
                  begin
                    DataForm2.StockTable.FieldByName('ModelNo').AsString := copy(DataForm2.StockTable.FieldByName('Description').AsString,i2 + 1,i3 - (i2 + 1))
                  end;
                  DataForm2.StockTable.FieldByName('ExtraDescr').Assign(TCData.TCStockInstall.Fieldbyname('SExtradesc'));
                  DataForm2.StockTable.FieldByName('NonStockItem').AsString := 'False';
                  DataForm2.StockTable.FieldByName('Changed').AsString := 'N';
                  DataForm2.StockTable.Post;
//                  Dataform2.StockTable.Requery();
                  Inc(Progi);
                  JvProgressDialog1.Position := Progi;
                  JvProgressDialog1.Text := InttoStr(Progi) + ' / ' + InttoStr(JvProgressDialog1.Max);
                  Application.ProcessMessages;
                  TCData.TcStockInstall.Next;
                  Continue;
                end;
//              if (Floattostrf(DataForm2.StockTable.FieldByName('Qty').asFloat,ffNumber,17,2) <> Floattostrf(Dataform2.StockTable.Fieldbyname('StartingQty').asFloat,ffNumber,17,2)) then
//              begin
//                TotalSelled := Dataform2.StockTable.Fieldbyname('StartingQty').asFloat - DataForm2.StockTable.FieldByName('Qty').asFloat;
//              end
//              else
//                TotalSelled := 0;
//              if ( Floattostrf(DataForm2.TCStockTable.FieldByName('FQtyOnHand').asFloat,ffNumber,17,2) <>  Floattostrf(Dataform2.StockTable.Fieldbyname('StartingQty').asFloat,ffNumber,17,2)) then
//              begin
//                TotalAdded := DataForm2.TCStockTable.FieldByName('FQtyOnHand').asFloat - Dataform2.StockTable.Fieldbyname('StartingQty').asFloat;
//              end
//              else
//                TotalAdded := 0;
//                showmessage('111');
                if DataForm2.StockTable.FieldByName('Description').asString <> TCData.TCStockInstall.Fieldbyname('SDescription').asString then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    Dataform2.StockTable.Edit;
                  DataForm2.StockTable.FieldByName('Description').Assign(TCData.TCStockInstall.Fieldbyname('SDescription'));
                  i2 := 0;
                  i3 := 0;
                  for i := 0 to DataForm2.StockTable.FieldByName('Description').DataSize do
                  begin
                    If copy(DataForm2.StockTable.FieldByName('Description').AsString,i,1) = '(' then
                    begin
                      i2 := i;
                    end;
                    If (copy(DataForm2.StockTable.FieldByName('Description').AsString,i,1) = ')') and (i2 <> 0) then
                    begin
                      i3 := i;
                    end;
                  end;
                  If (i2 <> 0) and (i3 <> 0) then
                  begin
                    DataForm2.StockTable.FieldByName('ModelNo').AsString := copy(DataForm2.StockTable.FieldByName('Description').AsString,i2 + 1,i3 - (i2 + 1))
                  end;
//                  showmessage('Description');
                end;
                if DataForm2.StockTable.FieldByName('ExtraDescr').asString <> TCData.TCStockInstall.Fieldbyname('SExtraDesc').asString then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    Dataform2.StockTable.Edit;
                  DataForm2.StockTable.FieldByName('ExtraDescr').Assign(TCData.TCStockInstall.Fieldbyname('SExtraDesc'));
//                  showmessage('Extradescr');
                end;

                if DataForm2.StockTable.FieldByName('Barcode').asString <> TCData.TCStockInstall.Fieldbyname('SBarCodeNumber').asString then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    Dataform2.StockTable.Edit;
                  DataForm2.StockTable.FieldByName('Barcode').Assign(TCData.TCStockInstall.Fieldbyname('SBarCodeNumber'));
//                  showmessage('Barcode');
                end;

                if Floattostrf(DataForm2.StockTable.FieldByName('CostPrice').asFloat,ffFixed,17,2) <> Floattostrf(TCData.TCStockInstall.Fieldbyname('FUnitCost').asFloat * 1.14,ffFixed,17,2) then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    Dataform2.StockTable.Edit;
                  DataForm2.StockTable.FieldByName('CostPrice').AsFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FUnitCost').asFloat * 1.14,ffFixed,17,2));
//                  showmessage('CostPrice');
                end;

//                showmessage(Floattostrf(DataForm2.StockTable.FieldByName('SalesPrice').asFloat,ffFixed,17,2) + '==' + Floattostrf(Dataform2.TCStockTable.Fieldbyname('FSellingPrice1').asFloat * 1.14,ffFixed,17,2));
                if Floattostrf(DataForm2.StockTable.FieldByName('SalesPrice').asFloat,ffFixed,17,2) <> Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice1').asFloat * 1.14,ffFixed,17,2) then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                  begin
                    Dataform2.StockTable.Edit;
                  end;
                  DataForm2.StockTable.FieldByName('SalesPrice').asFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice1').asFloat * 1.14,ffFixed,17,2));
//                  showmessage('SalesPrice');
                end;
                if Floattostrf(DataForm2.StockTable.FieldByName('SalesPrice2').asFloat,ffFixed,17,2) <> Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice2').asFloat * 1.14,ffFixed,17,2) then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                  begin
                    Dataform2.StockTable.Edit;
                  end;
                  DataForm2.StockTable.FieldByName('SalesPrice2').asFloat := StrtoFloat(Floattostrf(TCData.TCStockInstall.Fieldbyname('FSellingPrice2').asFloat * 1.14,ffFixed,17,2));
//                  showmessage('SalesPrice2');
                end;
                if Floattostrf(DataForm2.StockTable.FieldByName('AlertQty').asFloat,ffNumber,17,2) <> Floattostrf(TCData.TCStockInstall.Fieldbyname('FReorderQty').asFloat,ffNumber,17,2) then
                begin
                  if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                  begin
                    Dataform2.StockTable.Edit;
                  end;
                  DataForm2.StockTable.FieldByName('AlertQty').Assign(TCData.TCStockInstall.Fieldbyname('FReorderQty'));
//                  showmessage('AlertQty');
                end;
{              if TotalSelled <> 0 then
              begin
//                if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
//                begin
//                  Dataform2.StockTable.Edit;
//                end;
//                DataForm2.StockTable.FieldByName('Qty').asFloat := Dataform2.TCStockTable.Fieldbyname('FQtyOnHand').asFloat - TotalSelled;
                DataForm2.TCStockTable.Edit;
                Dataform2.TCStockTable.Fieldbyname('FQtyOnHand').asFloat := Dataform2.TCStockTable.Fieldbyname('FQtyOnHand').asFloat - TotalSelled;
                DataForm2.TCStockTable.Post;
                DataForm2.TCStockTable.Refresh;
              end;
}
//              if TotalAdded <> 0 then
//              begin
                  if Floattostrf(DataForm2.StockTable.FieldByName('Qty').asFloat,ffNumber,17,2) <> Floattostrf(MyRoundTo(TCData.TCStockInstall.Fieldbyname('FQtyOnHand').asFloat,-2),ffNumber,17,2) then
                  begin
//                    showmessage('Qty' + floattostr(DataForm2.StockTable.FieldByName('Qty').asFloat) + '--' + floattostr(MyRoundTo(Dataform2.TCStockInstall.Fieldbyname('FQtyOnHand').asFloat,-2)));
                    if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    begin
                      Dataform2.StockTable.Edit;
                    end;
                    DataForm2.StockTable.FieldByName('Qty').asFloat := MyRoundTo(TCData.TCStockInstall.Fieldbyname('FQtyOnHand').asFloat,-2);
                  end;
//              end;
//              if (TotalAdded <> 0) or (TotalSelled <> 0) then
//              begin
                  if Floattostrf(DataForm2.StockTable.FieldByName('StartingQty').asFloat,ffNumber,17,2) <> Floattostrf(Dataform2.StockTable.Fieldbyname('Qty').asFloat,ffNumber,17,2) then
                  begin
                    if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                    begin
                      Dataform2.StockTable.Edit;
                    end;
                    DataForm2.StockTable.FieldByName('StartingQty').Assign(Dataform2.StockTable.Fieldbyname('Qty'));
//                    showmessage('StartingQty');
                  end;
//              end;
                if (DataForm2.StockTablestrState = 'Edit') or (DataForm2.StockTablestrState = 'Insert') then
                begin
                  DataForm2.StockTable.FieldByName('DateChanged').asInteger := DatetoIntDate(date);
                  Dataform2.StockTable.Post;
//                  Dataform2.StockTable.Requery();
                end;

                Inc(Progi);
                JvProgressDialog1.Position := Progi;
                JvProgressDialog1.Text := InttoStr(Progi) + ' / ' + InttoStr(JvProgressDialog1.Max);
                Application.ProcessMessages;

                TCData.TCStockInstall.Next;
              end;
            finally
            end;
            TCData.TCStockInstall.EnableControls;
            TCData.TCStockInstall.Close;
            Dataform2.StockTable.Close;
            TCData.TurbocashDb.Connected := False;
            JvProgressDialog1.Hide;
            showmessage('Finished with Sync');
          except
          begin
            ShowMessage('Stock Sync didn''t finish, with an error, Please Try Again or contact support!');
            JvProgressDialog1.Hide;
            TCData.TCStockInstall.EnableControls;
            TCData.TCStockInstall.Close;
            Dataform2.StockTable.Close;
            TCData.TurbocashDb.Connected := False;
          end;
          raise;
          end;
        end
        else
          showmessage('Turbocash path not valid!');
      end
      else
        showmessage('No Turbocash path!');
    end
    else
      showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.TestHQStockandCreate(TCStockNoStr: String);
var
   i: Integer;
Label ReturnHere;
begin
       ReturnHere:

       DataForm.Query3.Close;
       Dataform.Query3.Prepared := False;
       with DataForm.Query3.SQL do begin
         Clear;
         Add('select Nr, Qty');
         Add('from stock_db');
         Add('where (TCStockNo = "' + TCStockNoStr + '")');
         Add('and (BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)) + ')');
       end;
       Dataform.Query3.Prepared := True;
       DataForm.Query3.Open;

       If Dataform.Query3.recordcount > 1 then
       begin
         DataForm.Query1.Active := False;
         with DataForm.Query1.SQL do begin
           Clear;
           Add('Delete FROM stock_db');
           Add('WHERE (TCStockNo = ''' + TCStockNoStr + ''') and (BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)) + ')');
         end;
         DataForm.Query1.ExecSQL;
         goto ReturnHere;
       end;

       If dataform.Query3.recordcount = 0 then
       begin
         Dataform.Query1.Close;
         with DataForm.Query1.SQL do begin
           Clear;
           Add('select Nr from stock_db');
           Add('WHERE (TCStockNo = "' + TCStockNoStr + '")');
           Add('and BranchNo is null');
         end;
         Dataform.Query1.Open;
         If Dataform.Query1.Recordcount = 1 then
         begin
           i := Dataform.Query1.Fieldbyname('Nr').asInteger;
         end
         else
         begin
           i := Dataform2.StockTableBranchMainStockNo.Value;
         end;

         Dataform2.Query4.Close;
         with Dataform2.Query4.SQL do
         begin
           Clear;
           Add('select Description, CostPrice, SalesPrice, Barcode, NonStockItem, Changed, TCStockNo, BranchNo, BranchMainStockNo, Qty, AlertQty, StartingQty, `Group`, SalesPrice2, ExtraDescr, ModelNo from stock_db');
           Add('where TCStockNo = "' + TCStockNoStr + '"');
           Add('and BranchNo is null');
         end;
         Dataform2.Query4.LockType := LtReadOnly;
         Dataform2.Query4.Prepared := True;
         Dataform2.Query4.Open;

         DataForm.Query1.Close;
         with DataForm.Query1.SQL do begin
           Clear;
           Add('insert into stock_db (Description, DateCreated, DateChanged, CostPrice, SalesPrice, Barcode, NonStockItem, Changed, TCStockNo, BranchNo, BranchMainStockNo, Qty, AlertQty, StartingQty, `Group`, SalesPrice2, ExtraDescr, ModelNo) Values');
           Add('("' + Dataform2.Query4.FieldByName('Description').AsString + '",' + inttoStr(DatetoIntDate(date)) + ',' + inttoStr(DatetoIntDate(date)) + ',' + FloattoStr(Dataform2.Query4.FieldByName('CostPrice').AsFloat) + ',' + FloattoStr(DataForm2.Query4.FieldByName('SalesPrice').AsFloat) + ',"' + Dataform2.Query4.FieldByName('Barcode').AsString + '","' + Dataform2.Query4.FieldByName('NonStockItem').AsString + '","' + DataForm2.Query4.FieldByName('Changed').AsString + '","' + Dataform2.Query4.FieldByName('TCStockNo').AsString + '",' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)) + ',' + InttoStr(i) +
               ',' + FloattoStr(Dataform2.Query4.FieldByName('Qty').AsFloat) + ',' + FloattoStr(Dataform2.Query4.FieldByName('AlertQty').AsFloat) + ',' + FloattoStr(Dataform2.Query4.FieldByName('StartingQty').AsFloat) + ',"' + Dataform2.Query4.FieldByName('Group').AsString + '",' + FloattoStr(DataForm2.Query4.FieldByName('SalesPrice2').asFloat) + ',"' + Dataform2.Query4.FieldByName('ExtraDescr').AsString + '","' + Dataform2.Query4.FieldByName('ModelNo').AsString + '")');
         end;
         DataForm.Query1.ExecSQL;
         Dataform2.Query4.Close;
         Dataform2.Query4.LockType := LtOptimistic;
         Dataform2.Query4.Prepared := False;
         goto ReturnHere;
       end;
end;

procedure TListsMenu.estWhichInvoicesdidntgotoHQ1Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
      begin
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
        begin
          DataForm.Connection.ConnectionString := 'Driver={mySQL ODBC 3.51 Driver};Server=' + DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') + ';""Port=3306;Option=4;Database=' + DataForm2.IniFile.ReadString('Login', 'DataBase', '') + ';Uid=' + DataForm2.IniFile.ReadString('Login', 'UserName', '') + ';Pwd=' + Decrypt(DataForm2.IniFile.ReadString('Login', 'Password', '')) + ';"';
          try
            ExtractForm.Memo1.clear;
            s := '"Inv No","Description"';
            SendMessage(ExtractForm.Handle,
              FOUT_MESSAGE,
              MY_INDEX,
              Integer(PChar(s)));
            Dataform.Connection.Open;
            Dataform2.InvoiceTable.Close;
            with Dataform2.InvoiceTable.SQL do
            begin
              Clear;
              Add('select * from invoice_db');
            end;
            Dataform2.InvoiceTable.Open;
            Dataform2.InvoiceTable.DisableControls;
            DataForm2.InvoiceTable.First;
            while not DataForm2.InvoiceTable.EOF do
            begin
              If Dataform2.InvoiceTableSyncHQ.Value <> 0 then
              begin
                Dataform.Query2.Close;
                with DataForm.Query2.SQL do begin
                  Clear;
                  Add('select Nr, SyncHQ, InvNo from invoice_db');
                  Add('where InvNo = ' + InttoStr(Dataform2.InvoiceTableInvNo.Value));
                end;
                Dataform.Query2.Open;
                If Dataform.Query2.RecordCount = 0 then
                begin
                  s := Inttostr(Dataform2.InvoiceTableInvNo.Value) + ',"Invoice not at HQ marked as send!"';
                  SendMessage(ExtractForm.Handle,
                    FOUT_MESSAGE,
                    MY_INDEX,
                    Integer(PChar(s)));
                end
                else
                begin
                  If Dataform.Query2.RecordCount > 1 then
                  begin
                    s := Inttostr(Dataform2.InvoiceTableInvNo.Value) + ',"Multiple Invoices found at HQ!"';
                    SendMessage(ExtractForm.Handle,
                      FOUT_MESSAGE,
                      MY_INDEX,
                      Integer(PChar(s)));
                  end
                  else
                  begin
                    Dataform.Query1.Close;
                    with DataForm.Query1.SQL do begin
                      Clear;
                      Add('select Nr from invoiceitem_db');
                      Add('where LinkID = ' + InttoStr(Dataform.Query2.FieldByName('Nr').AsInteger));
                    end;
                    Dataform.Query1.Open;
                    Dataform2.Query1.Close;
                    with DataForm2.Query1.SQL do begin
                      Clear;
                      Add('select Nr from invoiceitem_db');
                      Add('where LinkID = ' + InttoStr(Dataform2.InvoiceTable.FieldByName('Nr').AsInteger));
                    end;
                    Dataform2.Query1.Open;
                    If Dataform.Query1.RecordCount <> Dataform2.Query1.RecordCount then
                    begin
                      s := Inttostr(Dataform2.InvoiceTableInvNo.Value) + ',"Items Count doesn''t match on Invoice HQ!"';
                      SendMessage(ExtractForm.Handle,
                        FOUT_MESSAGE,
                        MY_INDEX,
                        Integer(PChar(s)));
                    end;
                  end;
                end;
              end;
              DataForm2.InvoiceTable.Next;
            end;
            Dataform2.InvoiceTable.EnableControls;
            ExtractForm.SaveDialog.FileName := 'FaultsHQInv.csv';
            if ExtractForm.SaveDialog.Execute then
              ExtractForm.Memo1.Lines.SaveToFile(ExtractForm.SaveDialog.FileName);
            ExtractForm.Memo1.clear;
          except
          begin
            ShowMessage('Fault list didn''t connect try again!');
            Dataform2.InvoiceTable.Close;
            Dataform.Query2.Close;
            Dataform.Query1.Close;
            Dataform2.Query1.Close;
            DataForm.Connection.Close;
          end;
          raise;
          end;
          Dataform2.InvoiceTable.Close;
          Dataform.Query2.Close;
          Dataform.Query1.Close;
          Dataform2.Query1.Close;
          DataForm.Connection.Close;
        end
        else
          showmessage('Add Branch Detail in setup!');
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.CompareStocktoHQ1Click(Sender: TObject);
var
      QtyStr: Extended;
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
      begin
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
        begin
          DataForm.Connection.ConnectionString := 'Driver={mySQL ODBC 3.51 Driver};Server=' + DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') + ';""Port=3306;Option=4;Database=' + DataForm2.IniFile.ReadString('Login', 'DataBase', '') + ';Uid=' + DataForm2.IniFile.ReadString('Login', 'UserName', '') + ';Pwd=' + Decrypt(DataForm2.IniFile.ReadString('Login', 'Password', '')) + ';"';
          try
            Dataform.Connection.Open;
            Dataform2.StockTable.Close;
            with Dataform2.StockTable.SQL do
            begin
              Clear;
              Add('select * from stock_db');
            end;
            Dataform2.StockTable.Open;
            Dataform2.StockTable.DisableControls;
            DataForm2.StockTable.First;
            while not DataForm2.StockTable.EOF do
            begin
              TestHQStockandCreate(Dataform2.StockTableTCStockNo.Value);
              QtyStr := FindTransferedStock(Dataform2.StockTableTCStockNo.Value, InttoStr(Dataform2.StockTableNr.Value));
              QtyStr := QtyStr - FindInvoiceStock(Dataform2.StockTableTCStockNo.Value, InttoStr(Dataform2.StockTableNr.Value));
              DataForm.Query1.Close;
              with DataForm.Query1.SQL do begin
                Clear;
                Add('Update stock_db set Qty = ' + FloattoStr(QtyStr));
                Add('where TCStockNo = ''' + Dataform2.StockTableTCStockNo.Value + '''');
                Add('and BranchNo = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
              end;
              DataForm.Query1.ExecSQL;
              DataForm2.Query1.Close;
              with DataForm2.Query1.SQL do begin
                Clear;
                Add('Update stock_db set Qty = ' + FloattoStr(QtyStr));
                Add('where TCStockNo = ''' + Dataform2.StockTableTCStockNo.Value + '''');
                Add('and BranchNo = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
              end;
              DataForm2.Query1.ExecSQL;

              DataForm2.StockTable.Next;
            end;
            Dataform2.StockTable.EnableControls;
          except
          begin
            ShowMessage('Fault list didn''t connect try again!');
            Dataform2.StockTable.Close;
            DataForm.Connection.Close;
          end;
          raise;
          end;
          Dataform2.StockTable.Close;
          DataForm.Connection.Close;
        end
        else
          showmessage('Add Branch Detail in setup!');
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

function TListsMenu.FindTransferedStock(TCStockNoStr,StockNoStr:String): Extended;
var
    e: extended;
begin
      Dataform.Query1.Close;
      with DataForm.Query1.SQL do begin
        Clear;
        Add('SELECT stocktrnsfer_db.Branch_No,stocktrnsferitem_db.TCStockNo, stocktrnsferitem_db.StockNo, stocktrnsferitem_db.qty');
        Add('from stocktrnsfer_db, stocktrnsferitem_db');
        Add('where stocktrnsfer_db.Nr = stocktrnsferitem_db.LinkID');
        Add('and stocktrnsfer_db.Branch_No = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
        Add('and stocktrnsferitem_db.TCStockNo = ''' + TCStockNoStr + '''');
        Add('and stocktrnsfer_db.Sync is not null');
      end;
      Dataform.Query1.Open;
      Dataform.Query1.DisableControls;
      Dataform.Query1.First;
      e := 0.00;
      while not Dataform.Query1.EOF do
      begin
        e := e + Dataform.Query1.FieldByName('Qty').asFloat;
        Dataform.Query1.Next;
      end;
      Dataform.Query1.EnableControls;
      FindTransferedStock := e;
end;

function TListsMenu.FindInvoiceStock(TCStockNoStr,StockNoStr:String): Extended;
var
    e: extended;
begin
      Dataform2.Query1.Close;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('SELECT invoice_db.InvNo,invoiceitem_db.TCStockNo, invoiceitem_db.StockNo, invoiceitem_db.qty');
        Add('from invoice_db, invoiceitem_db');
        Add('where invoice_db.Nr = invoiceitem_db.LinkID');
        Add('and invoiceitem_db.TCStockNo = ''' + TCStockNoStr + '''');
        Add('and ((invoice_db.InvClose = ''Close'') or (invoice_db.InvClose = ''LaybC''))');
      end;
      Dataform2.Query1.Open;
      Dataform2.Query1.DisableControls;
      Dataform2.Query1.First;
      e := 0.00;
      while not Dataform2.Query1.EOF do
      begin
        e := e + Dataform2.Query1.FieldByName('Qty').asFloat;
        Dataform2.Query1.Next;
      end;
      Dataform2.Query1.EnableControls;
      FindInvoiceStock := e;
end;

procedure TListsMenu.MarkallasnotsendtoTurbocash1Click(Sender: TObject);
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to mark all Invoices as not send to Turbocash! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.Query1.Close;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update invoice_db set ShiftSet = ''''');
        Add('where Invclose = ''Close''');
      end;
      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update invoice_db set InvNo = 0');
//        Add('where Invclose = ''PurcC''');
//      end;
//      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update invoice_db set Invclose = ''PurcO''');
//        Add('where Invclose = ''PurcC''');
//      end;
//      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update trans_db set ShiftSet = null');
//      end;
//      Dataform2.Query1.ExecSQL;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.MarkallBranchtransfersasnottransfered1Click(
  Sender: TObject);
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Mark all Branch stock transfers as not transfered! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.Query1.Close;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update stocktrnsfer_db set Sync = null');
      end;
      Dataform2.Query1.ExecSQL;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update stocktrnsfer_db set Closed = "False"');
      end;
      Dataform2.Query1.ExecSQL;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update stocktrnsferitem_db set Transfered = null');
      end;
      Dataform2.Query1.ExecSQL;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

Procedure TListsMenu.WriteHQInv();
begin
           DataForm.Query3.Close;
           with DataForm.Query3.SQL do begin
             Clear;
             Add('insert into invoice_db (ClientName, ClientTelW, ClientTelC, ClientAdr1, ClientAdr2, ClientAdr3, ClientEMail, ClientPCode,');
             Add('ClientVatNo, InvDate, InvBy, InvClose, AmmTendered, InvoiceType, GLDebNo, CUSet, InvTotal, ShiftSet, InvNo, SyncHQ,');
             Add('BranchNo, Days30, Days60, Days90, Days120, TermMonths, Premium) Values');
             Add('("' + DataForm2.InvoiceTableClientName.Value + '","' + DataForm2.InvoiceTableClientTelW.Value + '","' + DataForm2.InvoiceTableClientTelC.Value + '","' + DataForm2.InvoiceTableClientAdr1.Value + '","' + DataForm2.InvoiceTableClientAdr2.Value + '","' + DataForm2.InvoiceTableClientAdr3.Value + '","' + DataForm2.InvoiceTableClientEMail.Value + '","' + DataForm2.InvoiceTableClientPCode.Value + '",');
             Add('"' + DataForm2.InvoiceTableClientVatNo.Value + '",' + InttoStr(DataForm2.InvoiceTableInvDate.Value) + ',"' + DataForm2.InvoiceTableInvBy.Value + '","' + DataForm2.InvoiceTableInvClose.Value + '",' + FloattoStr(DataForm2.InvoiceTableAmmTendered.Value) + ',"' + DataForm2.InvoiceTableInvoiceType.Value + '","' + DataForm2.InvoiceTableGLDebNo.Value + '",' + InttoStr(DataForm2.InvoiceTableCUSet.Value) + ',' + Floattostr(DataForm2.InvoiceTableInvTotal.Value) + ',"",' + InttoStr(DataForm2.InvoiceTableInvNo.Value) + ',' + InttoStr(DatetoIntDate(Date)) + ',');
             Add(InttoStr(Dataform2.InvoiceTableBranchNo.Value) + ',' + FloattoStr(DataForm2.InvoiceTableDays30.Value) + ',' + FloattoStr(DataForm2.InvoiceTableDays60.Value) + ',' + FloattoStr(DataForm2.InvoiceTableDays90.Value) + ',' + FloattoStr(DataForm2.InvoiceTableDays120.Value) + ',' + InttoStr(DataForm2.InvoiceTableTermMonths.Value) + ',' + FloattoStr(DataForm2.InvoiceTablePremium.Value)+ ')');
           end;
           DataForm.Query3.ExecSQL;
end;

procedure TListsMenu.MarkPurchasesasnotsendtoTurbocash1Click(
  Sender: TObject);
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to mark all Purchase invoices as not send to Turbocash! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.Query1.Close;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update invoice_db set ShiftSet = ''''');
        Add('where Invclose = ''PurcC''');
      end;
      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update invoice_db set InvNo = 0');
//        Add('where Invclose = ''PurcC''');
//      end;
//      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update invoice_db set Invclose = ''PurcO''');
//        Add('where Invclose = ''PurcC''');
//      end;
//      Dataform2.Query1.ExecSQL;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update invoiceitem_db set StockNo = 0');
//        Add('where Invclose = ''PurcC''');
      end;
      Dataform2.Query1.ExecSQL;
//      with DataForm2.Query1.SQL do begin
//        Clear;
//        Add('Update trans_db set ShiftSet = null');
//      end;
//      Dataform2.Query1.ExecSQL;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.MarkLayBuytransactionsasnotsendtoTurbocash1Click(
  Sender: TObject);
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to mark all Lay Buy Transactions as not send to Turbocash! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.Query1.Close;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update invoice_db set ShiftSet = ''''');
        Add('where Invclose = ''LaybC''');
      end;
      Dataform2.Query1.ExecSQL;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Update trans_db set ShiftSet = null');
      end;
      Dataform2.Query1.ExecSQL;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.SpecialLayBuyFix1Click(Sender: TObject);
var
    i: Integer;
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to DELETE all open Invoices and Open Purchase orders! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.InvoiceTable.Close;
      with Dataform2.InvoiceTable.SQL do
      begin
        Clear;
        Add('select * from invoice_db');
      end;
      Dataform2.InvoiceTable.Open;
      Dataform2.InvoiceTable.DisableControls;
      Dataform2.InvoiceTable.First;
      JvProgressDialog1.Caption := 'Processing!!';
      JvProgressDialog1.Show;
      JvProgressDialog1.Max := DataForm2.InvoiceTable.RecordCount;
      i := 0;
      JvProgressDialog1.Position := 0;
      while not Dataform2.InvoiceTable.EOF do
      begin
        If (DataForm2.InvoiceTableInvClose.Value = 'LaybC') then
        begin
          Dataform2.Query1.Close;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('select Nr, Date from trans_db');
            Add('where LinkID = ' + InttoStr(Dataform2.InvoiceTable.FieldByName('InvNo').asInteger));
            Add('Order by Date');
          end;
          Dataform2.Query1.Open;
          Dataform2.Query1.Last;
          If Dataform2.Query1.FieldByName('Date').asInteger <> Dataform2.InvoiceTableInvDate.Value then
          begin
            Dataform2.InvoiceTable.Edit;
            Dataform2.InvoiceTableInvDate.Value := Dataform2.Query1.FieldByName('Date').asInteger;
            Dataform2.InvoiceTable.Post;
          end;
        end;
        Inc(i);
        JvProgressDialog1.Position := i;
        JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
        Dataform2.InvoiceTable.Next;
      end;
      Dataform2.InvoiceTable.EnableControls;
      Dataform2.InvoiceTable.Close;
      Dataform2.Query1.Close;
      JvProgressDialog1.Hide;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.SpecialPurchFix1Click(Sender: TObject);
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Don''t run this if you are not suppose to run this! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.Query1.Close;
      with Dataform2.Query1.SQL do
      begin
        Clear;
        Add('select * from invoiceitem_db');
        Add('where LinkID = 518');
        Add('and TCStockNo >= "MR0083" and TCStockNo <= "MR0573"');
      end;
      Dataform2.Query1.Open;
      with TCData.TurbocashDb.Params do
      begin
        clear;
        Add('path=' + DataForm2.IniFile.ReadString('TCSetup', 'TCPath', ''));
      end;
      TCData.TurbocashDb.Open;

      Dataform2.Query1.First;
      while not Dataform2.Query1.EOF do
      begin
        Dataform2.Query4.Close;
        with Dataform2.Query4.SQL do
        begin
          Clear;
          Add('select Nr, Qty from stock_db');
          Add('where TCStockNo = "' + Dataform2.Query1.FieldbyName('TCStockNo').Value + '"');
          Add('and BranchNo is null');
        end;
        Dataform2.Query4.Open;
        If Dataform2.Query4.RecordCount > 0 then
        begin
          Dataform2.Query2.Close;
          with Dataform2.Query2.SQL do
          begin
            Clear;
            Add('Update stock_db set Qty = ' + FloattoStr(Dataform2.Query4.Fieldbyname('Qty').Value + Dataform2.Query1.FieldByName('Qty').Value));
            Add('where Nr = ' + InttoStr(Dataform2.Query4.FieldbyName('Nr').Value));
          end;
          Dataform2.Query2.ExecSQL;
          TCData.TCQuery.Close;
          with TCData.TCQuery.SQL do
          begin
            Clear;
            Add('select SStockCode, FQtyOnHand from Stock.DB');
            Add('where SStockCode = "' + Dataform2.Query1.FieldbyName('TCStockNo').Value + '"');
          end;
          TCData.TCQuery.Open;
          if TCData.TCQuery.RecordCount > 0 then
          begin
            TCData.TCQuery2.Close;
            with TCData.TCQuery2.SQL do
            begin
              Clear;
              Add('Update Stock.DB set FQtyOnHand = ' + FloattoStr(TCData.TCQuery.Fieldbyname('FQtyOnHand').Value + Dataform2.Query1.FieldByName('Qty').Value));
              Add('where SStockCode = "' + TCData.TCQuery.FieldbyName('SStockCode').Value + '"');
            end;
            TCData.TCQuery2.ExecSQL;
          end
          else
            showmessage('Turbocash Stock item not found');
        end
        else
          showmessage('POS Stock item not found');
        Dataform2.Query1.Next;
      end;
      Dataform2.Query1.Close;
      Dataform2.Query2.Close;
      Dataform2.Query4.Close;
      TCData.TCQuery.Close;
      TCData.TCQuery2.Close;
      TCData.TurbocashDb.Close;
      showmessage('finished');
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.JvBitBtn1Click(Sender: TObject);
var
    i: Integer;
//    TotalSelled, TotalAdded: Extended;
    Fault, ContinueFault: String;
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 2) then
  begin
    if MessageDlg('Are you sure you want to get Stock, ARE YOUR INTERNET CONNECTION ACTIVE!', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      if (DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') <> '') then
      begin
        if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
        begin
          ContinueFault := 'True';
          Userform.JvSpeedButton13.Click;
          If UserForm.PingReturn < 5 then
          begin
            if MessageDlg('You have a very slow connection do you want to continue?', mtConfirmation,
               [mbYes, mbNo], 0) = mrNo then
              ContinueFault := 'False';
          end;
          If ContinueFault <> 'False' then
          begin
            DataForm.Connection.ConnectionString := 'Driver={mySQL ODBC 3.51 Driver};Server=' + DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') + ';""Port=3306;Option=4;Database=' + DataForm2.IniFile.ReadString('Login', 'DataBase', '') + ';Uid=' + DataForm2.IniFile.ReadString('Login', 'UserName', '') + ';Pwd=' + Decrypt(DataForm2.IniFile.ReadString('Login', 'Password', '')) + ';"';
            try
              DataForm.Connection.Open;
            except
            begin
              ShowMessage('Unable to connect to HQ, make sure Address is correct');
              DataForm.Connection.Close;
            end;
            raise;
            end;

            DataForm.StockTable.Close;
            Dataform.StockTable.LockType := LtReadOnly;

            Dataform2.StockTable.Close;
            with Dataform2.StockTable.SQL do
            begin
              Clear;
              Add('select * from stock_db');
              Add('where BranchNo is null');
            end;
            Dataform2.StockTable.Open;
            Dataform.StockTrnsferTable.Close;
            with Dataform.StockTrnsferTable.SQL do
            begin
              Clear;
              Add('select * from stocktrnsfer_db');
              Add('where Branch_no = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
              Add('and Closed = "True"');
              Add('and Sync is null');
            end;
            Dataform.StockTrnsferTable.Open;

            JvProgressDialog1.Caption := 'Stock from HQ';
            JvProgressDialog1.Show;

            DataForm.StocktrnsferItemTable.DisableControls;
            DataForm.StockTrnsferTable.DisableControls;
            try
              DataForm.StockTrnsferTable.First;
              while not DataForm.StockTrnsferTable.EOF do
              begin
                if Dataform.StockTrnsferTableSync.IsNull then
                begin
                  DataForm.StocktrnsferItemTable.Close;
                  with Dataform.StocktrnsferItemTable.SQL do
                  begin
                    Clear;
                    Add('select * from stocktrnsferitem_db');
                    Add('where LinkID = ' + InttoStr(Dataform.StockTrnsferTableNr.Value));
                  end;
                  DataForm.StocktrnsferItemTable.Open;
                  JvProgressDialog1.Max := Dataform.StockTrnsferItemTable.RecordCount;
                  i := 0;
                  JvProgressDialog1.Position := 0;
                  Fault := 'False';
                  DataForm.StocktrnsferItemTable.First;
                  while not DataForm.StocktrnsferItemTable.EOF do
                  begin
                    if (DataForm.StocktrnsferItemTableTransfered.Value = 0) or (DataForm.StocktrnsferItemTableTransfered.IsNull) then
                    begin
                      Dataform2.Connection.BeginTrans;
                      try
                        DataForm.StockTable.Close;
                        Dataform.StockTable.Prepared := False;
                        with Dataform.StockTable.SQL do
                        begin
                          Clear;
                          Add('select * from stock_db');
                          Add('where TCStockNo = "' + DataForm.StocktrnsferItemTable.Fieldbyname('TCStockNo').asString + '"');
                        end;
                        Dataform.StockTable.Prepared := True;
                        Dataform.StockTable.Open;
                        If Dataform.StockTable.RecordCount = 0 then
                        begin
                            showmessage('Can''t find HQ Stock item, this transfer skipped');
                            Fault := 'True';
                            break;
                        end;
//                        else
//                          Fault := 'Clear';

//                          if not Dataform.StockTable.Locate('Nr', DataForm.StocktrnsferItemTable.Fieldbyname('StockNo').asString,[]) then
//                          begin
//                            if not Dataform.StockTable.Locate('TCStockNo', DataForm.StocktrnsferItemTable.Fieldbyname('TCStockNo').asString,[]) then
//                            begin
//                              showmessage('Can''t find HQ Stock item, this transfer skipped');
//                              Fault := 'Break';
//                              break;
//                            end
//                            else
//                              Fault := 'Clear';
//                          end
                        if (not Dataform2.StockTable.Locate('Nr', DataForm.StocktrnsferItemTable.Fieldbyname('StockNo').asString,[])) and (Fault = 'False') then
                        begin
                          Dataform2.StockTable.Insert;
//                            DataForm2.StockTableNr.Value := Dataform.StocktrnsferItemTableStockNo.Value;
                          DataForm2.StockTable.FieldByName('DateCreated').asInteger := DatetoIntDate(date);
                          DataForm2.StockTable.FieldByName('DateChanged').asInteger := DatetoIntDate(date);
                          DataForm2.StockTable.FieldByName('Qty').asFloat := MyRoundTo(Dataform.StocktrnsferItemTableQty.Value, -2);
                          DataForm2.StockTable.FieldByName('AlertQty').asFloat := MyRoundTo(Dataform.StockTableAlertQty.Value, -2);
                          DataForm2.StockTable.FieldByName('CostPrice').asFloat := StrtoFloat(Floattostrf(Dataform.StockTableCostPrice.Value,ffFixed,17,2));
                          DataForm2.StockTable.FieldByName('SalesPrice').asFloat := StrtoFloat(Floattostrf(Dataform.StockTableSalesPrice.Value,ffFixed,17,2));
                          DataForm2.StockTable.FieldByName('SalesPrice2').asFloat := StrtoFloat(Floattostrf(Dataform.StockTableSalesPrice2.Value,ffFixed,17,2));
                          DataForm2.StockTable.FieldByName('StartingQty').asFloat := MyRoundTo(Dataform.StocktrnsferItemTableQty.Value, -2);
                          DataForm2.StockTable.FieldByName('TCStockNo').Assign(DataForm.StockTableTCStockNo);
                          DataForm2.StockTable.FieldByName('Barcode').Assign(DataForm.StockTableBarcode);
                          DataForm2.StockTable.FieldByName('Description').Assign(DataForm.StockTableDescription);
                          DataForm2.StockTable.FieldByName('ExtraDescr').Assign(DataForm.StockTableExtraDescr);
                          DataForm2.StockTable.FieldByName('ModelNo').Assign(DataForm.StockTableModelNo);
                          DataForm2.StockTable.FieldByName('NonStockItem').Assign(DataForm.StockTableNonStockItem);
                          DataForm2.StockTable.FieldByName('Changed').AsString := 'N';
                          DataForm2.StockTable.Post;
                        end
                        else
                        begin
                          If Fault = 'False' then
                          begin
                            if DataForm2.StockTable.FieldByName('Description').asString <> DataForm.StockTable.FieldByName('Description').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('Description').Assign(DataForm.StockTable.FieldByName('Description'));
                            end;
                            if DataForm2.StockTable.FieldByName('ExtraDescr').asString <> DataForm.StockTable.FieldByName('ExtraDescr').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('ExtraDescr').Assign(DataForm.StockTable.FieldByName('ExtraDescr'));
                            end;
                            if DataForm2.StockTable.FieldByName('ModelNo').asString <> DataForm.StockTable.FieldByName('ModelNo').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('ModelNo').Assign(DataForm.StockTable.FieldByName('ModelNo'));
                            end;
                            if DataForm2.StockTable.FieldByName('TCStockNo').asString <> DataForm.StockTable.FieldByName('TCStockNo').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('TCStockNo').Assign(DataForm.StockTable.FieldByName('TCStockNo'));
                            end;

                            if DataForm2.StockTable.FieldByName('Barcode').asString <> DataForm.StockTable.FieldByName('Barcode').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('Barcode').Assign(DataForm.StockTable.FieldByName('Barcode'));
                            end;

                            if Floattostrf(DataForm2.StockTable.FieldByName('CostPrice').asFloat,ffNumber,17,2) <> Floattostrf(DataForm.StockTable.FieldByName('CostPrice').asFloat,ffNumber,17,2) then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('CostPrice').AsFloat := StrtoFloat(Floattostrf(DataForm.StockTable.FieldByName('CostPrice').asFloat,ffNumber,17,2));
                            end;

                            if Floattostrf(DataForm2.StockTable.FieldByName('SalesPrice').asFloat,ffFixed,17,2) <> Floattostrf(DataForm.StockTable.FieldByName('SalesPrice').asFloat,ffFixed,17,2) then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('SalesPrice').asFloat := StrtoFloat(Floattostrf(DataForm.StockTable.FieldByName('SalesPrice').asFloat,ffFixed,17,2));
                            end;
                            if Floattostrf(DataForm2.StockTable.FieldByName('SalesPrice2').asFloat,ffFixed,17,2) <> Floattostrf(DataForm.StockTable.FieldByName('SalesPrice2').asFloat,ffFixed,17,2) then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('SalesPrice2').asFloat := StrtoFloat(Floattostrf(DataForm.StockTable.FieldByName('SalesPrice2').asFloat,ffFixed,17,2));
                            end;

                            if Floattostrf(DataForm2.StockTable.FieldByName('AlertQty').asFloat,ffNumber,17,2) <> Floattostrf(DataForm.StockTable.FieldByName('AlertQty').asFloat,ffNumber,17,2) then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('AlertQty').Assign(DataForm.StockTable.FieldByName('AlertQty'));
                            end;

                            if (Dataform.StocktrnsferItemTableQty.Value <> 0) then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('Qty').asFloat := DataForm2.StockTable.FieldByName('Qty').asFloat + Dataform.StocktrnsferItemTableQty.Value;
                            end;

                            if DataForm2.StockTable.FieldByName('NonStockItem').asString <> Dataform.StockTable.FieldByName('NonStockItem').asString then
                            begin
                              if (DataForm2.StockTablestrState <> 'Edit') and (DataForm2.StockTablestrState <> 'Insert') then
                                Dataform2.StockTable.Edit;
                              DataForm2.StockTable.FieldByName('NonStockItem').asString := DataForm.StockTable.FieldByName('NonStockItem').asString;
                            end;

                            if (DataForm2.StockTablestrState = 'Edit') then
                            begin
                              DataForm2.StockTable.FieldByName('DateChanged').asInteger := DatetoIntDate(date);
                              Dataform2.StockTable.Post;
                            end;
                          end;
                        end;
                        Dataform2.Connection.CommitTrans;
                      finally
                        if DataForm2.Connection.InTransaction then
                        begin
                          Dataform2.Connection.RollbackTrans;
                          Fault := 'True';
//                          showmessage('This stock Transfer didn''t finish!');
                        end
                        else
                        begin
                          Fault := 'False';
                          Dataform.Query3.Close;
                          with DataForm.Query3.SQL do begin
                            Clear;
                            Add('update stocktrnsferitem_db set Transfered = ' + InttoStr(datetoIntDate(date)));
                            Add('where Nr = ' + InttoStr(Dataform.StocktrnsferItemTableNr.Value));
                          end;
                          DataForm.Query3.ExecSQL;
                        end;
                      end;
                    end;

                    If Fault = 'True' then
                      Break;

                    Inc(i);
                    JvProgressDialog1.Position := i;
                    JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                    Application.ProcessMessages;

                    DataForm.StocktrnsferItemTable.Next;
                  end;
                end;

                If Fault = 'False' then
                begin
                  DataForm.StockTrnsferTable.Edit;
                  DataForm.StockTrnsferTableSync.Value := DatetoIntDate(date);
                  DataForm.StockTrnsferTable.Post;
                end
                else
                  showmessage('A stock transfer did not finish, reconnect to internet and run again!');

                DataForm.StockTrnsferTable.Next;
              end;
            finally
            end;
            DataForm.StockTrnsferTable.EnableControls;
            DataForm.StocktrnsferItemTable.EnableControls;
            Dataform.StockTable.Close;
            Dataform.StockTable.Prepared := False;
            Dataform.StockTable.LockType := LtOptimistic;
            Dataform.StockTrnsferTable.Close;
            Dataform.StocktrnsferItemTable.Close;
            DataForm2.StockTable.Close;
            DataForm.Connection.Close;
            JvProgressDialog1.Hide;
            showmessage('Finished with Sync');
          end;
        end
        else
          showmessage('No Branch no in setup!');
      end
      else
        showmessage('No HQ Address in setup!');
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.JvBitBtn8Click(Sender: TObject);
var
   Fault, ContinueFault: String;
   i, NewCuNo: Integer;
begin
  DataForm2.Query3.Close;
  with DataForm2.Query3.SQL do begin
    Clear;
    Add('select CUSet from invoice_db');
    Add('where Invclose = "Close" and CUSet is null');
    Add('and InvTotal <> 0');
    Add('Order by InvNo');
  end;
  DataForm2.Query3.Open;
  If (Dataform2.Query3.RecordCount = 0) then
  begin
    if (DataForm2.User_db.FieldByName('Rights').asInteger > 2) then
    begin
      if DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0') <> '0' then
      begin
        ContinueFault := 'True';
        Userform.JvSpeedButton13.Click;
        If UserForm.PingReturn < 5 then
        begin
          if MessageDlg('You have a very slow connection do you want to continue?', mtConfirmation,
             [mbYes, mbNo], 0) = mrNo then
            ContinueFault := 'False';
        end;
        If ContinueFault <> 'False' then
        begin
          if MessageDlg('Are you sure you want to send Invoices, ARE YOUR INTERNET CONNECTION ACTIVE!', mtConfirmation,
          [mbYes, mbNo], 0) = mrYes then
          begin
            Dataform.Query1.Close;
            DataForm2.Query3.Close;
            with DataForm2.Query3.SQL do begin
              Clear;
              Add('select Nr');
              Add('from invoice_db');
              Add('where SyncHQ is null');
              Add('and ((Invclose = ''Close'') or (Invclose = ''LaybC'') or (Invclose = ''LaybO'') or (InvClose = ''RecqC'') or (InvClose = ''GRNC''))');
              Add('Order by InvNo');
            end;
            Dataform2.Query3.LockType := ltReadOnly;
            Dataform2.Query3.Prepared := True;
            DataForm2.Query3.Open;

            DataForm.Connection.ConnectionString := 'Driver={mySQL ODBC 3.51 Driver};Server=' + DataForm2.IniFile.ReadString('BranchSetup', 'HQAddress', '') + ';""Port=3306;Option=4;Database=' + DataForm2.IniFile.ReadString('Login', 'DataBase', '') + ';Uid=' + DataForm2.IniFile.ReadString('Login', 'UserName', '') + ';Pwd=' + Decrypt(DataForm2.IniFile.ReadString('Login', 'Password', '')) + ';"';
            try
              DataForm.Connection.Open;
            except
            begin
              ShowMessage('Can''t connect to HQ, Please try again later!');
              DataForm.Connection.Close;
            end;
            raise;
            end;

            Dataform2.InvoiceTable.Close;
            with Dataform2.InvoiceTable.SQL do
            begin
              Clear;
              Add('select * from invoice_db');
              Add('where SyncHQ is null');
            end;
            Dataform2.InvoiceTable.Prepared := True;
            Dataform2.InvoiceTable.Open;
            Dataform2.InvoiceItemTable.Open;
            JvProgressDialog1.Caption := 'Invoices';
            JvProgressDialog1.Show;
            JvProgressDialog1.Max := Dataform2.Query3.RecordCount;
            i := 0;

            If Dataform2.Query3.RecordCount <> 0 then
            begin
              Dataform2.Query3.DisableControls;
              DataForm2.Query3.First;
              while not DataForm2.Query3.EOF do
              begin
                Dataform.Connection.BeginTrans;
                try
                  if not dataform2.InvoiceTable.Locate('Nr', Inttostr(Dataform2.Query3.Fieldbyname('Nr').asInteger),[]) then
                  begin
                    showmessage('Invoice not found, RUN STOPPED!');
                    Dataform.Connection.RollbackTrans;
                    break;
                  end;
                  if Dataform2.InvoiceTableInvClose.Value <> 'GRNC' then
                  begin
                    DataForm.Query3.Close;
                    Dataform.Query3.Prepared := False;
                    with DataForm.Query3.SQL do
                    begin
                      Clear;
                      Add('select Nr from invoice_db');
                      Add('where InvNo = ' + Inttostr(DataForm2.InvoiceTableInvNo.Value));
                      Add('and BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)));
                    end;
                    Dataform.Query3.LockType := ltReadOnly;
                    Dataform.Query3.Prepared := True;
                    DataForm.Query3.Open;
                    if DataForm.Query3.RecordCount <> 0 then
                    begin
//                      If DataForm.Query3.FieldByName('BranchNo').asInteger = DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0) then
//                      begin
                      with Dataform.Query1.SQL do
                      begin
                        Clear;
                        Add('Delete FROM invoiceitem_db');
                        Add('where LinkId = ' + InttoStr(Dataform.Query3.FieldByName('Nr').AsInteger));
                      end;
                      DataForm.Query1.ExecSql;
                      with Dataform.Query1.SQL do begin
                        Clear;
                        Add('Delete FROM invoice_db');
                        Add('where InvNo = ' + InttoStr(Dataform.Query3.FieldByName('InvNo').AsInteger));
                      end;
                      DataForm.Query1.ExecSql;
//                    end;
                    end;

                    WriteHQInv;

                    Dataform2.InvoiceItemTable.Close;
                    Dataform2.InvoiceItemTable.Open;
                    DataForm2.InvoiceItemTable.First;
                    Dataform.Query2.Close;
                    with DataForm.Query2.SQL do
                    begin
                      Clear;
                      Add('select Nr from invoice_db');
                      Add('where (InvNo = ' + InttoStr(Dataform2.InvoiceTableInvNo.Value) + ')');
                      Add('and (BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)) + ')');
                    end;
                    Dataform.Query2.Prepared := True;
                    Dataform.Query2.LockType := ltReadOnly;
                    Dataform.Query2.Open;

                    If Dataform.Query2.RecordCount = 0 then
                    begin
                      showmessage('Invoice skipped something went wrong ' + InttoStr(Dataform2.InvoiceTableInvNo.Value));
                      Dataform.Connection.RollbackTrans;
                      Dataform2.Query3.Next;
                      Inc(i);
                      JvProgressDialog1.Position := i;
                      JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                      Continue;
                    end;

                    while not DataForm2.InvoiceItemTable.EOF do
                    begin
                      if (Dataform2.InvoiceTableInvClose.Value <> 'RecqC') then
                      begin
                        TestHQStockandCreate(Dataform2.InvoiceItemTableTCStockNo.Value);
                        with DataForm.Query1.SQL do
                        begin
                          Clear;
                          Add('insert into invoiceitem_db (Description, Price, Qty, StockNo, LinkId, Discount, CostPrice, TCStockNo, Comment) Values');
                          Add('("' + Dataform2.InvoiceItemTableDescription.Value + '",' + FloattoStr(Dataform2.InvoiceItemTablePrice.Value) + ',' + FloattoStr(DataForm2.InvoiceItemTableQty.Value) + ',' + InttoStr(Dataform.Query3.Fieldbyname('Nr').asInteger) + ',' + InttoStr(DataForm.Query2.FieldByName('Nr').asInteger) + ',' + FloattoStr(Dataform2.InvoiceItemTableDiscount.Value) + ',' + FloattoStr(Dataform2.InvoiceItemTableCostPrice.Value) + ',"' + DataForm2.InvoiceItemTableTCStockNo.Value + '","' + DataForm2.InvoiceItemTableComment.Value + '")');
                        end;
                        DataForm.Query1.ExecSQL;
                      end
                      else
                      begin
                        with DataForm.Query1.SQL do
                        begin
                          Clear;
                          Add('insert into invoiceitem_db (Description, Price, Qty, LinkId, Discount, CostPrice, TCStockNo, Comment) Values');
                          Add('("' + Dataform2.InvoiceItemTableDescription.Value + '",' + FloattoStr(Dataform2.InvoiceItemTablePrice.Value) + ',' + FloattoStr(DataForm2.InvoiceItemTableQty.Value) + ',' + InttoStr(DataForm.Query2.FieldByName('Nr').asInteger) + ',' + FloattoStr(Dataform2.InvoiceItemTableDiscount.Value) + ',' + FloattoStr(Dataform2.InvoiceItemTableCostPrice.Value) + ',"' + DataForm2.InvoiceItemTableTCStockNo.Value + '","' + DataForm2.InvoiceItemTableComment.Value + '")');
                        end;
                        DataForm.Query1.ExecSQL;
                      end;

                      if Dataform2.InvoiceTableInvClose.Value <> 'RecqC' then
                      begin
                        with DataForm.Query1.SQL do
                        begin
                          Clear;
                          Add('Update stock_db set Qty = ' + FloattoStr(DataForm.Query3.FieldbyName('Qty').asFloat - Dataform2.InvoiceItemTable.FieldByName('Qty').asFloat));
                          Add('where Nr = ' + InttoStr(Dataform.Query3.FieldByName('Nr').asInteger));
                        end;
                        DataForm.Query1.ExecSQL;
                      end;

                      Application.ProcessMessages;
                      DataForm2.InvoiceItemTable.Next;
                    end;
                  end
                  else
                    UpdatetoHQGRN;
                  Dataform.Connection.CommitTrans;
                finally
                  if DataForm.Connection.InTransaction then
                  begin
                    Dataform.Connection.RollbackTrans;
                    showmessage('Inv no: ' + InttoStr(Dataform2.InvoiceTableInvNo.Value) + ' Rerun ''Send to hq'' later or call support');
                  end
                  else
                  begin
                    Dataform2.InvoiceTable.Edit;
                    DataForm2.InvoiceTableSyncHQ.Value := DatetoIntDate(date);
                    DataForm2.InvoiceTable.Post;
                  end;
                end;

                Inc(i);
                JvProgressDialog1.Position := i;
                JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                Application.ProcessMessages;

                DataForm2.Query3.Next;
              end;
              Dataform2.Query3.EnableControls;
            end;
            Dataform.Query3.Close;
            Dataform.Query3.Prepared := False;
            Dataform.Query3.LockType := ltOptimistic;
            Dataform.Query2.Close;
            Dataform.Query2.Prepared := False;
            Dataform.Query2.LockType := ltOptimistic;
            Dataform2.InvoiceTable.Close;
            Dataform2.InvoiceTable.Prepared := False;
            Dataform2.InvoiceItemTable.Close;

            DataForm2.Query3.Close;
            Dataform2.Query3.Prepared := False;
            with DataForm2.Query3.SQL do begin
              Clear;
              Add('select Nr');
              Add('from cashup_db');
              Add('where SyncHQ is null');
            end;
            Dataform2.Query3.Prepared := True;
            DataForm2.Query3.Open;

            If DataForm2.Query3.RecordCount <> 0 then
            begin
              JvProgressDialog1.Caption := 'Cash Up';
              JvProgressDialog1.Position := 0;
              JvProgressDialog1.Max := Dataform2.Query3.RecordCount;
              i := 0;

 //               DataForm.CashUpTable.Open;
              DataForm2.CashUpTable.Open;
              Dataform2.Query3.DisableControls;
              DataForm2.Query3.First;
              while not DataForm2.Query3.EOF do
              begin
                Dataform.Connection.BeginTrans;
                try
                  if not Dataform2.CashupTable.Locate('Nr', InttoStr(DataForm2.Query3.FieldbyName('Nr').asInteger),[]) then
                  begin
                    showmessage('Cash up not found, run stopped!');
                    Dataform.Connection.RollbackTrans;
                    break;
                  end;
                  Dataform.Query1.Close;
                  with Dataform.Query1.SQL do
                  begin
                    Clear;
                    Add('insert into cashup_db (Date,User,RealCashtotal,RealChequesTotal,RealCreditCardTotal,RealOtherTotal,CountCashtotal,CountChequesTotal,CountCreditCardTotal,CountOtherTotal,TotalInvoices,TimeStamp,CUClosed) Values');
                    Add('(' + InttoStr(Dataform2.CashUpTableDate.AsInteger) + ',"' + DataForm2.CashUpTableUser.AsString + '",' + floattostr(DataForm2.CashUpTableRealCashTotal.AsFloat) + ',' +
                        floattostr(DataForm2.CashUpTableRealChequesTotal.AsFloat) + ',' + floattostr(Dataform2.CashUpTableRealCreditCardTotal.AsFloat) + ',' + floattostr(Dataform2.CashUpTableRealOtherTotal.AsFloat) + ',' +
                        floattostr(DataForm2.CashUpTableCountCashTotal.AsFloat) + ',' + floattostr(Dataform2.CashUpTableCountChequesTotal.AsFloat) + ',' + floattostr(Dataform2.CashUpTableCountCreditCardTotal.AsFloat) + ',' +
                        floattostr(Dataform2.CashUpTableCountOtherTotal.AsFloat) + ',' + Inttostr(Dataform2.CashUpTableTotalInvoices.AsInteger) + ',"' + Dataform2.CashUpTableTimeStamp.AsString + '","' + Dataform2.CashUpTableCUClosed.AsString + '")');
                  end;
                  Dataform.Query1.ExecSQL;

  {                  DataForm.CashUpTable.Insert;
                    DataForm.CashUpTableDate.Assign(Dataform2.CashUpTableDate);
                    Dataform.CashUpTableUser.Assign(DataForm2.CashUpTableUser);
                    DataForm.CashUpTableRealCashTotal.Assign(DataForm2.CashUpTableRealCashTotal);
                    DataForm.CashUpTableRealChequesTotal.Assign(DataForm2.CashUpTableRealChequesTotal);
                    Dataform.CashUpTableRealCreditCardTotal.Assign(Dataform2.CashUpTableRealCreditCardTotal);
                    Dataform.CashUpTableRealOtherTotal.Assign(Dataform2.CashUpTableRealOtherTotal);
                    Dataform.CashUpTableCountCashTotal.Assign(DataForm2.CashUpTableCountCashTotal);
                    DataForm.CashUpTableCountChequesTotal.Assign(Dataform2.CashUpTableCountChequesTotal);
                    DataForm.CashUpTableCountCreditCardTotal.Assign(Dataform2.CashUpTableCountCreditCardTotal);
                    DataForm.CashUpTableCountOtherTotal.Assign(Dataform2.CashUpTableCountOtherTotal);
                    dataForm.CashUpTableTotalInvoices.Assign(Dataform2.CashUpTableTotalInvoices);
                    Dataform.CashUptableTimeStamp.Assign(Dataform2.CashUpTableTimeStamp);
                    Dataform.CashUpTableCUClosed.Assign(Dataform2.CashUpTableCUClosed);
                    Dataform.CashUpTable.Post;
                    Dataform.CashUpTable.Resync([rmExact]);    }

                  with Dataform.Query1.SQL do
                  begin
                    Clear;
                    Add('select Nr from cashup_db');
                    Add('where User = "' + DataForm2.CashUpTableUser.AsString + '"');
                    Add('and TimeStamp = "' + Dataform2.CashUpTableTimeStamp.AsString + '"');
                    Add('and TotalInvoices = ' + InttoStr(Dataform2.CashUpTableTotalInvoices.AsInteger));
                  end;
                  Dataform.Query1.Open;
                  If Dataform.Query1.RecordCount = 1 then
                    NewCuNo := Dataform.Query1.Fieldbyname('Nr').AsInteger
                  else
                  begin
                    Dataform.Connection.RollbackTrans;
                    Dataform2.Query3.Next;
                    Inc(i);
                    JvProgressDialog1.Position := i;
                    JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                    Continue;
                  end;
                  Dataform.Query1.Close;
                  with DataForm.Query1.SQL do begin
                    Clear;
                    Add('Update invoice_db set CUSet = ' + InttoStr(NewCuNo));
                    Add('where CUSet = ' + InttoStr(Dataform2.CashUptable.FieldByName('Nr').asInteger));
                    Add('and BranchNo = ' + DataForm2.IniFile.ReadString('BranchSetup', 'BranchNo', '0'));
                  end;
                  DataForm.Query1.ExecSQL;
                  Dataform.Connection.CommitTrans;
                finally
                  if DataForm.Connection.InTransaction then
                  begin
                    Dataform.Connection.RollbackTrans;
                  end
                  else
                  begin
                    DataForm2.CashUpTable.Edit;
                    Dataform2.CashUpTableSyncHQ.Value := DatetoIntDate(date);
                    Dataform2.CashUpTable.Post;
                  end;
                end;

                Inc(i);
                JvProgressDialog1.Position := i;
                JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                Application.ProcessMessages;

                DataForm2.Query3.Next;
              end;
              Dataform2.Query3.EnableControls;
              DataForm2.Query3.Close;
              Dataform2.Query3.LockType := ltOptimistic;
              Dataform2.Query3.Prepared := False;
   //             DataForm.CashUpTable.Close;
              DataForm2.CashUpTable.Close;
            end;

              If StrtoBool(DataForm2.IniFile.ReadString ('LayBuySetup', 'Enable', '0')) = True then
              begin
                DataForm2.TransQuery.Close;
                with DataForm2.TransQuery.SQL do begin
                  Clear;
                  Add('select *');
                  Add('from trans_db');
                  Add('where SyncHQ is null');
                end;
                Dataform2.TransQuery.Prepared := True;
                DataForm2.TransQuery.Open;

                If DataForm2.TransQuery.RecordCount <> 0 then
                begin

                  JvProgressDialog1.Caption := 'Lay buy Payments';
                  JvProgressDialog1.Position := 0;
                  JvProgressDialog1.Max := Dataform2.TransQuery.RecordCount;
                  i := 0;

                  Dataform.Query1.Close;
                  DataForm.TransTable.Open;
                  Dataform2.TransQuery.DisableControls;
                  DataForm2.TransQuery.First;
                  while not DataForm2.TransQuery.EOF do
                  begin
                    Dataform.Connection.BeginTrans;
                    try
                      with Dataform.Query1.SQL do
                      begin
                        Clear;
                        Add('insert into trans_db (Description,Ammount,Date,LinkID,PaymentType,PaymentBy,SyncHQ,BranchNo) Values');
                        Add('("' + Dataform2.TransQueryDescription.AsString + '",' + floattostr(Dataform2.TransQueryAmmount.AsFloat) + ',' + inttostr(Dataform2.TransQueryDate.Value) + ',' +
                            InttoStr(Dataform2.TransQueryLinkID.AsInteger) + ',"' + DataForm2.TransQueryPaymentType.AsString + '","' + Dataform2.TransQueryPaymentBy.asString + '",' +
                            InttoStr(DatetoIntDate(date)) + ',' + InttoStr(Dataform2.TransQueryBranchNo.asInteger) + ')');
                      end;
                      Dataform.Query1.ExecSQL;

{                      DataForm.TransTable.Insert;
                      Dataform.TransTableDescription.Assign(Dataform2.TransQueryDescription);
                      Dataform.TransTableAmmount.Assign(Dataform2.TransQueryAmmount);
                      Dataform.TransTableDate.Assign(Dataform2.TransQueryDate);
                      Dataform.TransTableLinkID.Assign(Dataform2.TransQueryLinkID);
                      Dataform.TransTablePaymentType.Assign(DataForm2.TransQueryPaymentType);
                      Dataform.TransTablePaymentBy.Assign(Dataform2.TransQueryPaymentBy);
                      Dataform.TransTableSyncHQ.Value := DatetoIntDate(date);
                      Dataform.TransTable.Post;     }
                      Dataform.Connection.CommitTrans;
                    finally
                      if DataForm.Connection.InTransaction then
                      begin
                        Dataform.Connection.RollbackTrans;
                      end
                      else
                      begin
                        with DataForm2.Query1.SQL do begin
                          Clear;
                          Add('update trans_db set SyncHQ = ' + InttoStr(datetoIntDate(date)));
                          Add('where Nr = ' + InttoStr(Dataform2.TransQueryNr.Value));
                        end;
                        DataForm2.Query1.ExecSQL;
                      end;
                    end;

                    Inc(i);
                    JvProgressDialog1.Position := i;
                    JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                    Application.ProcessMessages;

                    DataForm2.TransQuery.Next;
                  end;
                  Dataform2.TransQuery.EnableControls;
                  Dataform2.TransQuery.Close;
                  Dataform2.TransQuery.Prepared := False;
                end;
              end;
              TestforHQInvReturning;
              JvProgressDialog1.Hide;
//              Dataform.StockTable.Close;
              DataForm.Connection.Close;
              showmessage('Finished sending Invoices / Transactions!');
          end;
        end;
      end
      else
        showmessage('Add Branch Detail in setup!');
    end
    else
      showMessage('You don''t have permision to go in here!');
  end
  else
    showmessage('Cash up first!');
end;

procedure TListsMenu.JvBitBtn2Click(Sender: TObject);
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 3) then
      begin
         Application.CreateForm(TStockReportsForm, StockReportsForm);
         Dataform2.BranchTable.Open;
         StockReportsForm.showmodal;
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.TestforHQInvReturning();
var
    i: Integer;
begin
          Dataform.Query3.Close;
          with Dataform.Query3.SQL do
          begin
            Clear;
            Add('select Nr, ClientName, ClientTelW, ClientTelC, ClientAdr1, ClientAdr2, ClientAdr3, ClientEMail, ClientPCode,');
            Add('ClientVatNo, InvDate, InvBy, InvClose, AmmTendered, InvoiceType, GLDebNo, CUSet, InvTotal, ShiftSet, InvNo, SyncHQ,');
            Add('BranchNo, TermMonths, Premium');
            Add('from invoice_db');
            Add('where InvClose = "PurcO"');
            Add('and SyncHQ is null');
            Add('and BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)));
            Add('and GLDebNo <> ""');
          end;
          Dataform.Query3.Prepared := True;
          Dataform.Query3.Open;

          JvProgressDialog1.Caption := 'Requisitions';
          JvProgressDialog1.Show;
          JvProgressDialog1.Max := Dataform.Query3.RecordCount;
          i := 0;

          If Dataform.Query3.RecordCount <> 0 then
          begin
            Dataform.Query3.DisableControls;
            DataForm.Query3.First;
            while not DataForm.Query3.EOF do
            begin
              Dataform2.Connection.BeginTrans;
              try
                DataForm2.Query3.Close;
                with DataForm2.Query3.SQL do
                begin
                  Clear;
                  Add('select Nr from invoice_db');
                  Add('where InvNo = ' + Inttostr(DataForm.Query3.FieldByName('InvNo').Value));
                  Add('and BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)));
                  Add('and InvClose = "GRNO"');
                end;
                DataForm2.Query3.Open;
                if DataForm2.Query3.RecordCount <> 0 then
                begin
                  Dataform2.Query1.Close;
                  with Dataform2.Query1.SQL do
                  begin
                    Clear;
                    Add('Delete FROM invoiceitem_db');
                    Add('where LinkId = ' + InttoStr(Dataform.Query3.FieldByName('Nr').AsInteger));
                  end;
                  DataForm2.Query1.ExecSql;
                  with Dataform2.Query1.SQL do begin
                    Clear;
                    Add('Delete FROM invoice_db');
                    Add('where InvNo = ' + InttoStr(Dataform.Query3.FieldByName('InvNo').AsInteger));
                  end;
                  DataForm2.Query1.ExecSql;
                end;

                WriteLocalInv;

                Dataform.Query1.Close;
                with Dataform.Query1.SQL do
                begin
                  Clear;
                  Add('select Nr, Description, Price, Qty, StockNo, LinkId, Discount, CostPrice, TCStockNo, Comment from invoiceitem_db');
                  Add('where LinkID = ' + InttoStr(Dataform.Query3.FieldByName('Nr').asInteger));
                end;
                Dataform.Query1.LockType := ltReadonly;
                Dataform.Query1.Prepared := True;
                Dataform.Query1.Open;

                DataForm.Query1.First;
                Dataform2.Query4.Close;
                with DataForm2.Query4.SQL do begin
                  Clear;
                  Add('select Nr from invoice_db');
                  Add('where (InvNo = ' + InttoStr(DataForm.Query3.FieldByName('InvNo').Value) + ')');
                  Add('and (BranchNo = ' + InttoStr(DataForm2.IniFile.ReadInteger('BranchSetup', 'BranchNo', 0)) + ')');
                  Add('and InvClose = "GRNO"');
                end;
                Dataform2.Query4.Open;
                If Dataform2.Query4.RecordCount = 0 then
                begin
                  showmessage('Invoice skipped something went wrong ' + InttoStr(Dataform.Query3.FieldByName('InvNo').Value));
                  Dataform2.Connection.RollbackTrans;
                  Dataform.Query3.Next;
                  Inc(i);
                  JvProgressDialog1.Position := i;
                  JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
                  Continue;
                end;
                while not DataForm.Query1.EOF do
                begin
                  If (not Dataform.Query1.FieldByName('StockNo').IsNull) and (Dataform.Query1.FieldByName('StockNo').AsInteger <> 0) then
                  begin
                    TestLocalStockandCreate;
                    DataForm2.Query2.Close;
                    with DataForm2.Query2.SQL do begin
                      Clear;
                      Add('insert into invoiceitem_db (Description, Price, Qty, StockNo, LinkId, Discount, CostPrice, TCStockNo, Comment) Values');
                      Add('("' + Dataform.Query1.FieldByName('Description').AsString + '",' + FloattoStr(Dataform.Query1.FieldByName('Price').AsFloat) + ',' + FloattoStr(DataForm.Query1.FieldByName('Qty').AsFloat) + ',' + InttoStr(Dataform2.Query3.Fieldbyname('Nr').asInteger) + ',' + InttoStr(DataForm2.Query4.FieldByName('Nr').asInteger) + ',' + FloattoStr(Dataform.Query1.FieldByName('Discount').AsFloat) + ',' + FloattoStr(Dataform.Query1.FieldByName('CostPrice').AsFloat) + ',"' + DataForm.Query1.FieldByName('TCStockNo').AsString + '","' + DataForm.Query1.FieldByName('Comment').AsString + '")');
                    end;
                    DataForm2.Query2.ExecSQL;
                  end
                  else
                  begin
                    DataForm2.Query2.Close;
                    with DataForm2.Query2.SQL do begin
                      Clear;
                      Add('insert into invoiceitem_db (Description, Price, Qty, LinkId, Discount, CostPrice, TCStockNo, Comment) Values');
                      Add('("' + Dataform.Query1.FieldByName('Description').AsString + '",' + FloattoStr(Dataform.Query1.FieldByName('Price').AsFloat) + ',' + FloattoStr(DataForm.Query1.FieldByName('Qty').AsFloat) + ',' + InttoStr(DataForm2.Query4.FieldByName('Nr').asInteger) + ',' + FloattoStr(Dataform.Query1.FieldByName('Discount').AsFloat) + ',' + FloattoStr(Dataform.Query1.FieldByName('CostPrice').AsFloat) + ',"' + DataForm.Query1.FieldByName('TCStockNo').AsString + '","' + DataForm.Query1.FieldByName('Comment').AsString + '")');
                    end;
                    DataForm2.Query2.ExecSQL;
                  end;

                  Application.ProcessMessages;
                  DataForm.Query1.Next;
                end;
                Dataform2.Connection.CommitTrans;
              finally
                if DataForm2.Connection.InTransaction then
                begin
                  Dataform2.Connection.RollbackTrans;
                  showmessage('Inv no: ' + InttoStr(Dataform.Query3.FieldbyName('InvNo').AsInteger) + ' Rerun ''Send to hq'' later or call support');
                end
                else
                begin
                  Dataform.Query3.Edit;
                  DataForm.Query3.FieldByName('SyncHQ').Value := DatetoIntDate(date);
                  DataForm.Query3.Post;
                end;
              end;

              Inc(i);
              JvProgressDialog1.Position := i;
              JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
              Application.ProcessMessages;

              DataForm.Query3.Next;
            end;
            Dataform.Query3.EnableControls;

            Dataform.Query1.Close;
            Dataform.Query1.LockType := ltOptimistic;
            Dataform.Query3.Close;
            Dataform2.Query4.Close;
            DataForm2.Query3.Close;
          end;
end;

Procedure TListsMenu.WriteLocalInv();
begin
           DataForm2.Query3.Close;
           with DataForm2.Query3.SQL do begin
             Clear;
             Add('insert into invoice_db (ClientName, ClientTelW, ClientTelC, ClientAdr1, ClientAdr2, ClientAdr3, ClientEMail, ClientPCode,');
             Add('ClientVatNo, InvDate, InvBy, InvClose, AmmTendered, InvoiceType, GLDebNo, CUSet, InvTotal, ShiftSet, InvNo,');
             Add('BranchNo, TermMonths, Premium) Values');
             Add('("' + DataForm.Query3.FieldByName('ClientName').AsString + '","' + DataForm.Query3.FieldByName('ClientTelW').AsString + '","' + DataForm.Query3.FieldByName('ClientTelC').AsString + '","' + DataForm.Query3.FieldByName('ClientAdr1').AsString + '","' + DataForm.Query3.FieldByName('ClientAdr2').AsString + '","' + DataForm.Query3.FieldByName('ClientAdr3').AsString + '","' + DataForm.Query3.FieldByName('ClientEMail').AsString + '","' + DataForm.Query3.FieldByName('ClientPCode').AsString + '",');
             Add('"' + DataForm.Query3.FieldByName('ClientVatNo').AsString + '",' + InttoStr(DataForm.Query3.FieldByName('InvDate').AsInteger) + ',"' + DataForm.Query3.FieldByName('InvBy').AsString + '","GRNO",' + FloattoStr(DataForm.Query3.FieldByName('AmmTendered').AsFloat) + ',"' + DataForm.Query3.FieldByName('InvoiceType').AsString + '","' + DataForm.Query3.FieldByName('GLDebNo').AsString + '",' + InttoStr(DataForm.Query3.FieldByName('CUSet').asInteger) + ',' + Floattostr(DataForm.Query3.FieldByName('InvTotal').AsFloat) + ',"",' + InttoStr(DataForm.Query3.FieldByName('InvNo').AsInteger) + ',');
             Add(InttoStr(Dataform.Query3.FieldByName('BranchNo').AsInteger) + ',' + InttoStr(DataForm.Query3.FieldByName('TermMonths').asInteger) + ',' + FloattoStr(DataForm.Query3.FieldByName('Premium').asFloat)+ ')');
           end;
           DataForm2.Query3.ExecSQL;
end;

procedure TListsMenu.TestLocalStockandCreate();
var
   i: Integer;
Label ReturnHere;
begin
       ReturnHere:

       DataForm2.Query3.Close;
       with DataForm2.Query3.SQL do begin
         Clear;
         Add('select Nr, Qty from stock_db');
         Add('where (TCStockNo = "' + Dataform.Query1.FieldByName('TCStockNo').Value + '")');
         Add('and (BranchNo is null)');
       end;
       DataForm2.Query3.Open;

       If Dataform2.Query3.recordcount > 1 then
       begin
         DataForm2.Query1.Close;
         with DataForm2.Query1.SQL do begin
           Clear;
           Add('Delete FROM stock_db');
           Add('WHERE (TCStockNo = ''' + Dataform.Query1.FieldByName('TCStockNo').Value + ''') and (BranchNo is null)');
         end;
         DataForm2.Query1.ExecSQL;
         goto ReturnHere;
       end;

       If dataform2.Query3.recordcount = 0 then
       begin
         Dataform.Query2.Close;
         with Dataform.Query2.SQL do
         begin
           Clear;
           Add('select Description, CostPrice, SalesPrice, Barcode, NonStockItem, TCStockNo, AlertQty, StartingQty, `Group`, ExtraDescr, ModelNo from stock_db');
           Add('where TCStockNo = "' + DataForm.Query1.FieldByName('TCStockNo').Value + '"');
           Add('and BranchNo is null');
         end;
         Dataform.Query2.LockType := ltReadonly;
         Dataform.Query2.Prepared := True;
         Dataform.Query2.Open;
         If Dataform.Query2.RecordCount > 0 then
         begin
           DataForm2.Query1.Close;
           with DataForm2.Query1.SQL do begin
             Clear;
             Add('insert into stock_db (Description, DateCreated, DateChanged, CostPrice, SalesPrice, Barcode, NonStockItem, TCStockNo, Qty, AlertQty, StartingQty, `Group`, ExtraDescr, ModelNo) Values');
             Add('("' + Dataform.Query2.FieldByName('Description').AsString + '",' + inttoStr(DatetoIntDate(date)) + ',' + inttoStr(DatetoIntDate(date)) + ',' + FloattoStr(Dataform.Query2.FieldByName('CostPrice').AsFloat) + ',' + FloattoStr(DataForm.Query2.FieldByName('SalesPrice').AsFloat) + ',"' + Dataform.Query2.FieldByName('Barcode').AsString + '","' + Dataform.Query2.FieldByName('NonStockItem').AsString + '","' + Dataform.Query2.FieldByName('TCStockNo').AsString + '",0,' + FloattoStr(Dataform.Query2.FieldByName('AlertQty').AsFloat) + ',' + FloattoStr(Dataform.Query2.FieldByName('StartingQty').AsFloat) + ',"' + Dataform.Query2.FieldByName('Group').AsString + '","' + Dataform.Query2.FieldByName('ExtraDescr').AsString + '","' + Dataform.Query2.FieldByName('ModelNo').AsString + '")');
           end;
           DataForm2.Query1.ExecSQL;
         end;
         Dataform.Query2.Close;
         Dataform.Query2.Prepared := False;
         Dataform.Query2.LockType := ltOptimistic;
         goto ReturnHere;
       end;
end;

procedure TListsMenu.UpdatetoHQGRN();
begin
       DataForm.Query3.Close;
       Dataform.Query3.Prepared := False;
       with DataForm.Query3.SQL do
       begin
         Clear;
         Add('select Nr from invoice_db');
         Add('where InvNo = ' + Inttostr(DataForm2.InvoiceTableInvNo.Value));
         Add('and BranchNo = ' + InttoStr(DataForm2.InvoiceTableBranchNo.Value));
         Add('and InvClose = "PurcO"');
       end;
       Dataform.Query3.LockType := ltReadOnly;
       Dataform.Query3.Prepared := True;
       DataForm.Query3.Open;
       if Dataform.Query3.RecordCount <> 0 then
       begin
         Dataform2.InvoiceItemTable.Close;
         Dataform2.InvoiceItemTable.Open;
         DataForm2.InvoiceItemTable.First;
         while not DataForm2.InvoiceItemTable.EOF do
         begin
           Dataform.Query2.Close;
           with Dataform.Query2.SQL do
           begin
             Clear;
             Add('select Nr from invoiceitem_db');
             Add('where TCStockNo = "' + Dataform2.InvoiceItemTableTCStockNo.Value + '"');
             Add('and LinkID = ' + inttostr(Dataform.Query3.FieldByName('Nr').asInteger));
           end;
           Dataform.Query2.LockType := ltReadOnly;
           Dataform.Query2.Open;
           If (Dataform.Query2.RecordCount = 0) or (Dataform.Query2.RecordCount > 1) then
           begin
             Dataform.Query2.Close;
             with Dataform.Query2.SQL do
             begin
               Clear;
               Add('select Nr from invoiceitem_db');
               Add('where Description = "' + Dataform2.InvoiceItemTableDescription.Value + '"');
               Add('and LinkID = ' + inttostr(Dataform.Query3.FieldByName('Nr').asInteger));
             end;
             Dataform.Query2.LockType := ltReadOnly;
             Dataform.Query2.Open;
           end;
           Dataform2.Query4.Close;
           with Dataform2.Query4.SQL do
           begin
             Clear;
             Add('select Price2 from invoiceitem_db');
             Add('where Nr = ' + InttoStr(Dataform2.InvoiceItemTableNr.Value));
           end;
           Dataform2.Query4.Open;
           Dataform.Query1.Close;
           with Dataform.Query1.SQL do
           begin
             Clear;
             Add('Update invoiceitem_db set Qty = ' + floattostr((Dataform2.InvoiceItemTableQty.Value + (Dataform2.Query4.FieldByName('Price2').AsFloat - Dataform2.InvoiceItemTableQty.Value))) + ', CostPrice = ' + floattostr(Dataform2.InvoiceItemTableCostPrice.Value));
             Add('where Nr = ' + InttoStr(Dataform.Query2.FieldByName('Nr').asInteger));
           end;
           Dataform.Query1.ExecSQL;
           DataForm2.InvoiceItemTable.Next;
         end;
         Dataform2.Query4.Close;
       end;
       Dataform.Query3.Close;
       Dataform.Query3.LockType := ltOptimistic;
       Dataform.Query2.Close;
       Dataform.Query2.LockType := ltOptimistic;
end;

procedure TListsMenu.JvBitBtn3Click(Sender: TObject);
var
      i: Integer;
begin
      if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
      begin
        if MessageDlg('Are you sure you want to Age all the Lay Buys!', mtConfirmation,
        [mbYes, mbNo], 0) = mrYes then
        begin
            Dataform2.InvoiceTable.Close;
            with Dataform2.InvoiceTable.SQL do
            begin
              Clear;
              Add('select * from invoice_db');
              Add('where InvClose = "LaybO"');
            end;
            Dataform2.InvoiceTable.Open;
            JvProgressDialog1.Caption := 'Aging Lay Buys';
            JvProgressDialog1.Show;
            JvProgressDialog1.Max := Dataform2.InvoiceTable.RecordCount;
            i := 0;
            Dataform2.InvoiceTable.DisableControls;
            DataForm2.InvoiceTable.First;
            while not DataForm2.InvoiceTable.EOF do
            begin
              Dataform2.InvoiceTable.Edit;
              If Dataform2.InvoiceTableDays90.Value > 0 then
              begin
                Dataform2.InvoiceTableDays120.Value := Dataform2.InvoiceTableDays90.Value;
                Dataform2.InvoiceTableDays90.Value := 0;
              end
              else
              begin
                If Dataform2.InvoiceTableDays60.Value > 0 then
                begin
                  Dataform2.InvoiceTableDays90.Value := Dataform2.InvoiceTableDays60.Value;
                  Dataform2.InvoiceTableDays60.Value := 0;
                end
                else
                begin
                  If Dataform2.InvoiceTableDays30.Value > 0 then
                  begin
                    Dataform2.InvoiceTableDays60.Value := Dataform2.InvoiceTableDays30.Value;
                    Dataform2.InvoiceTableDays30.Value := 0;
                  end
                  else
                  begin
                    DataForm2.Query2.Close;
                    with DataForm2.Query2.SQL do begin
                      Clear;
                      Add('SELECT Ammount FROM trans_db');
                      Add('where LinkID = ' + InttoStr(Dataform2.InvoiceTable.FieldByName('InvNo').asInteger));
                      Add('and Description = "Deposit"');
                    end;
                    Dataform2.Query2.Open;
                    Dataform2.InvoiceTableDays30.Value := Dataform2.InvoiceTableDays30.Value + (Dataform2.InvoiceTableInvTotal.Value - Dataform2.Query2.FieldByName('Ammount').AsFloat);
                  end;
                end;
              end;
              Dataform2.InvoiceTable.Post;

              Inc(i);
              JvProgressDialog1.Position := i;
              JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
              Application.ProcessMessages;
              DataForm2.InvoiceTable.Next;
            end;
            Dataform2.InvoiceTable.EnableControls;
            Dataform2.InvoiceTable.Close;
            DataForm2.Query2.Close;
            JvProgressDialog1.Hide;
        end;
      end
      else
        showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.RemoveallopenInvoicesClick(Sender: TObject);
var
    i: Integer;
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to DELETE all open Invoices! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.InvoiceTable.Close;
      with Dataform2.InvoiceTable.SQL do
      begin
        Clear;
        Add('select * from invoice_db');
        Add('where InvClose = "Open"');
      end;
      Dataform2.InvoiceTable.Open;
      Dataform2.InvoiceTable.DisableControls;
      Dataform2.InvoiceTable.First;
      JvProgressDialog1.Caption := 'Processing!!';
      JvProgressDialog1.Show;
      JvProgressDialog1.Max := DataForm2.InvoiceTable.RecordCount;
      i := 0;
      JvProgressDialog1.Position := 0;
      while not Dataform2.InvoiceTable.EOF do
      begin
        If (DataForm2.InvoiceTableInvClose.Value = 'Open') then
        begin
          Dataform2.Query1.Close;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('Delete from invoiceitem_db');
            Add('where LinkId = ' + InttoStr(Dataform2.InvoiceTableNr.Value));
          end;
          Dataform2.Query1.ExecSQL;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('Update invoice_db set ShiftSet = ''Delete''');
            Add('where Nr = ' + InttoStr(Dataform2.InvoiceTableNr.Value));
          end;
          Dataform2.Query1.ExecSQL;
        end;
        Inc(i);
        JvProgressDialog1.Position := i;
        JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
        Application.ProcessMessages;
        Dataform2.InvoiceTable.Next;
      end;
      Dataform2.InvoiceTable.EnableControls;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Delete from invoice_db');
        Add('where Shiftset = ''Delete''');
      end;
      Dataform2.Query1.ExecSQL;
      Dataform2.InvoiceTable.Close;
      JvProgressDialog1.Hide;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

procedure TListsMenu.RemoveallopenPurchaseInvoices1Click(Sender: TObject);
var
    i: Integer;
begin
  if (DataForm2.User_db.FieldByName('Rights').asInteger > 4) then
  begin
    if MessageDlg('Are you sure you want to DELETE all Open Purchase orders! (NOT REVERSABLE)', mtConfirmation,
    [mbYes, mbNo], 0) = mrYes then
    begin
      Dataform2.InvoiceTable.Close;
      with Dataform2.InvoiceTable.SQL do
      begin
        Clear;
        Add('select * from invoice_db');
        Add('where InvClose = "PurcO"');
      end;
      Dataform2.InvoiceTable.Open;
      Dataform2.InvoiceTable.DisableControls;
      Dataform2.InvoiceTable.First;
      JvProgressDialog1.Caption := 'Processing!!';
      JvProgressDialog1.Show;
      JvProgressDialog1.Max := DataForm2.InvoiceTable.RecordCount;
      i := 0;
      JvProgressDialog1.Position := 0;
      while not Dataform2.InvoiceTable.EOF do
      begin
        If (DataForm2.InvoiceTableInvClose.Value = 'PurcO') then
        begin
          Dataform2.Query1.Close;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('Delete from invoiceitem_db');
            Add('where LinkId = ' + InttoStr(Dataform2.InvoiceTableNr.Value));
          end;
          Dataform2.Query1.ExecSQL;
          with DataForm2.Query1.SQL do begin
            Clear;
            Add('Update invoice_db set ShiftSet = ''Delete''');
            Add('where Nr = ' + InttoStr(Dataform2.InvoiceTableNr.Value));
          end;
          Dataform2.Query1.ExecSQL;
        end;
        Inc(i);
        JvProgressDialog1.Position := i;
        JvProgressDialog1.Text := InttoStr(i) + ' / ' + InttoStr(JvProgressDialog1.Max);
        Application.ProcessMessages;
        Dataform2.InvoiceTable.Next;
      end;
      Dataform2.InvoiceTable.EnableControls;
      with DataForm2.Query1.SQL do begin
        Clear;
        Add('Delete from invoice_db');
        Add('where Shiftset = ''Delete''');
      end;
      Dataform2.Query1.ExecSQL;
      Dataform2.InvoiceTable.Close;
      JvProgressDialog1.Hide;
    end;
  end
  else
    showMessage('You don''t have permision to go in here!');
end;

end.
